[{"/Users/manuel/Desktop/inscribe-app/src/index.js":"1","/Users/manuel/Desktop/inscribe-app/src/reportWebVitals.js":"2","/Users/manuel/Desktop/inscribe-app/src/store/GlobalState.jsx":"3","/Users/manuel/Desktop/inscribe-app/src/store/AppReducer.js":"4","/Users/manuel/Desktop/inscribe-app/src/store/ActionTypes.js":"5","/Users/manuel/Desktop/inscribe-app/src/assets/icons/DownloadIcon.js":"6","/Users/manuel/Desktop/inscribe-app/src/assets/icons/UpdateIcon.js":"7","/Users/manuel/Desktop/inscribe-app/src/assets/icons/TrashIcon.js":"8","/Users/manuel/Desktop/inscribe-app/src/utils/useQuery.js":"9","/Users/manuel/Desktop/inscribe-app/src/components/AssetCollapsible.jsx":"10","/Users/manuel/Desktop/inscribe-app/src/components/DraggableItem.jsx":"11","/Users/manuel/Desktop/inscribe-app/src/components/ColumnItemEditor.jsx":"12","/Users/manuel/Desktop/inscribe-app/src/components/sidebar/Properties.jsx":"13","/Users/manuel/Desktop/inscribe-app/src/components/buttons/ColorPickerButton.jsx":"14","/Users/manuel/Desktop/inscribe-app/src/App.jsx":"15","/Users/manuel/Desktop/inscribe-app/src/pages/Dashboard.jsx":"16","/Users/manuel/Desktop/inscribe-app/src/pages/ArticleEditor.jsx":"17","/Users/manuel/Desktop/inscribe-app/src/pages/Home.jsx":"18","/Users/manuel/Desktop/inscribe-app/src/pages/Extensions.jsx":"19","/Users/manuel/Desktop/inscribe-app/src/pages/EditorView.jsx":"20","/Users/manuel/Desktop/inscribe-app/src/components/topbar/DashboardBar.jsx":"21","/Users/manuel/Desktop/inscribe-app/src/components/topbar/TopBar.jsx":"22","/Users/manuel/Desktop/inscribe-app/src/components/topbar/PrototypeNav.jsx":"23","/Users/manuel/Desktop/inscribe-app/src/components/ExtensionCard.jsx":"24","/Users/manuel/Desktop/inscribe-app/src/components/DropZoneFile.jsx":"25","/Users/manuel/Desktop/inscribe-app/src/components/sidebar/TemplatesBar.jsx":"26","/Users/manuel/Desktop/inscribe-app/src/components/sidebar/SideBarRight.jsx":"27","/Users/manuel/Desktop/inscribe-app/src/components/ColumnsEditor.jsx":"28","/Users/manuel/Desktop/inscribe-app/src/components/DroppableZone.jsx":"29","/Users/manuel/Desktop/inscribe-app/src/components/BlockEditor.jsx":"30","/Users/manuel/Desktop/inscribe-app/src/components/topbar/ArticleToolbar.jsx":"31","/Users/manuel/Desktop/inscribe-app/src/components/topbar/DesignToolbar.jsx":"32","/Users/manuel/Desktop/inscribe-app/src/components/FileTemplate.jsx":"33","/Users/manuel/Desktop/inscribe-app/src/components/Collaspible.jsx":"34","/Users/manuel/Desktop/inscribe-app/src/components/buttons/EditButton.jsx":"35","/Users/manuel/Desktop/inscribe-app/src/components/modal/AddView.jsx":"36","/Users/manuel/Desktop/inscribe-app/src/components/modal/HeaderTitle.jsx":"37","/Users/manuel/Desktop/inscribe-app/src/components/extensions/ColorPicker.jsx":"38","/Users/manuel/Desktop/inscribe-app/src/components/modal/InsMenu.jsx":"39","/Users/manuel/Desktop/inscribe-app/src/components/extensions/PropertyHeading.jsx":"40","/Users/manuel/Desktop/inscribe-app/src/components/modal/InsModal.jsx":"41","/Users/manuel/Desktop/inscribe-app/src/components/sidebar/SideBarLeft.jsx":"42","/Users/manuel/Desktop/inscribe-app/src/components/extensions/AssetPicker.jsx":"43","/Users/manuel/Desktop/inscribe-app/src/components/extensions/Components.jsx":"44","/Users/manuel/Desktop/inscribe-app/src/components/extensions/Component.jsx":"45","/Users/manuel/Desktop/inscribe-app/src/components/modal/ImageCropper.jsx":"46","/Users/manuel/Desktop/inscribe-app/src/components/OutlineCollapsible.jsx":"47","/Users/manuel/Desktop/inscribe-app/src/pages/PresentationEditor.jsx":"48","/Users/manuel/Desktop/inscribe-app/src/pages/PlaceholderEditor.jsx":"49","/Users/manuel/Desktop/inscribe-app/src/components/sidebar/PresentationOutline.jsx":"50","/Users/manuel/Desktop/inscribe-app/src/components/sidebar/ArticleOutline.jsx":"51"},{"size":574,"mtime":1629117573434,"results":"52","hashOfConfig":"53"},{"size":362,"mtime":1626706933351,"results":"54","hashOfConfig":"53"},{"size":16047,"mtime":1629211103157,"results":"55","hashOfConfig":"53"},{"size":2657,"mtime":1629138238456,"results":"56","hashOfConfig":"53"},{"size":834,"mtime":1629134929256,"results":"57","hashOfConfig":"53"},{"size":1127,"mtime":1626706933289,"results":"58","hashOfConfig":"53"},{"size":1222,"mtime":1626706933290,"results":"59","hashOfConfig":"53"},{"size":1790,"mtime":1626706933290,"results":"60","hashOfConfig":"53"},{"size":153,"mtime":1627008676530,"results":"61","hashOfConfig":"53"},{"size":2474,"mtime":1629215784051,"results":"62","hashOfConfig":"53"},{"size":327,"mtime":1629117573423,"results":"63","hashOfConfig":"53"},{"size":5460,"mtime":1629212227324,"results":"64","hashOfConfig":"53"},{"size":2464,"mtime":1629211575181,"results":"65","hashOfConfig":"53"},{"size":1274,"mtime":1629214742791,"results":"66","hashOfConfig":"53"},{"size":141,"mtime":1629210190185,"results":"67","hashOfConfig":"53"},{"size":1560,"mtime":1629212533513,"results":"68","hashOfConfig":"53"},{"size":391,"mtime":1629216772184,"results":"69","hashOfConfig":"53"},{"size":464,"mtime":1629210163971,"results":"70","hashOfConfig":"53"},{"size":2197,"mtime":1629210426736,"results":"71","hashOfConfig":"53"},{"size":1498,"mtime":1629212710594,"results":"72","hashOfConfig":"53"},{"size":1967,"mtime":1629215883361,"results":"73","hashOfConfig":"53"},{"size":3096,"mtime":1629211478588,"results":"74","hashOfConfig":"53"},{"size":833,"mtime":1629210027590,"results":"75","hashOfConfig":"53"},{"size":1573,"mtime":1629210269799,"results":"76","hashOfConfig":"53"},{"size":3936,"mtime":1629210265072,"results":"77","hashOfConfig":"53"},{"size":1011,"mtime":1629213076515,"results":"78","hashOfConfig":"53"},{"size":338,"mtime":1629209981907,"results":"79","hashOfConfig":"53"},{"size":3058,"mtime":1629213004569,"results":"80","hashOfConfig":"53"},{"size":3383,"mtime":1629210261531,"results":"81","hashOfConfig":"53"},{"size":6233,"mtime":1629212182761,"results":"82","hashOfConfig":"53"},{"size":2024,"mtime":1629210016405,"results":"83","hashOfConfig":"53"},{"size":1850,"mtime":1629210024252,"results":"84","hashOfConfig":"53"},{"size":398,"mtime":1629210277865,"results":"85","hashOfConfig":"53"},{"size":1091,"mtime":1629210250998,"results":"86","hashOfConfig":"53"},{"size":494,"mtime":1629210399204,"results":"87","hashOfConfig":"53"},{"size":1112,"mtime":1629212099773,"results":"88","hashOfConfig":"53"},{"size":362,"mtime":1629210500688,"results":"89","hashOfConfig":"53"},{"size":4646,"mtime":1629212157361,"results":"90","hashOfConfig":"53"},{"size":2424,"mtime":1629213807438,"results":"91","hashOfConfig":"53"},{"size":656,"mtime":1629210536413,"results":"92","hashOfConfig":"53"},{"size":953,"mtime":1629211757444,"results":"93","hashOfConfig":"53"},{"size":2283,"mtime":1629217860310,"results":"94","hashOfConfig":"53"},{"size":2403,"mtime":1629210551999,"results":"95","hashOfConfig":"53"},{"size":3078,"mtime":1629214920554,"results":"96","hashOfConfig":"53"},{"size":419,"mtime":1629210125394,"results":"97","hashOfConfig":"53"},{"size":5679,"mtime":1629212199399,"results":"98","hashOfConfig":"53"},{"size":1870,"mtime":1629210289701,"results":"99","hashOfConfig":"53"},{"size":2280,"mtime":1629212338924,"results":"100","hashOfConfig":"53"},{"size":1866,"mtime":1629212925640,"results":"101","hashOfConfig":"53"},{"size":1665,"mtime":1629217846234,"results":"102","hashOfConfig":"53"},{"size":1605,"mtime":1629217988367,"results":"103","hashOfConfig":"53"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},"1ymnm69",{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"106"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"106"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"106"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"106"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"106"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"106"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"106"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"106"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"106"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"106"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"106"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"106"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"213","messages":"214","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/manuel/Desktop/inscribe-app/src/index.js",[],["219","220"],"/Users/manuel/Desktop/inscribe-app/src/reportWebVitals.js",[],"/Users/manuel/Desktop/inscribe-app/src/store/GlobalState.jsx",["221","222"],"import React, { createContext, useReducer } from 'react';\nimport reducer from './AppReducer';\nimport localforage from 'localforage';\nimport useQuery from '../utils/useQuery';\nimport { v4 } from 'uuid';\nimport {\n    CHANGE_WORKSPACE,\n    OPEN_DROPDOWN,\n    CLOSE_DROPDOWN,\n    CHANGE_BREAKPOINT,\n    TOGGLE_LEFT_SIDEBAR,\n    TOGGLE_RIGHT_SIDEBAR,\n    LOAD_PRESENTATION,\n    ADD_ASSET,\n    ADD_TO_PRESENTATION,\n    SELECT_ITEM,\n    OPEN_MODAL,\n    CLOSE_MODAL,\n    TOGGLE_DRAGGING,\n    ON_DRAG,\n    ON_DROP,\n    SELECT_ASSET,\n    SELECT_COMPONENT,\n    REMOVE_ITEM\n} from './ActionTypes';\n\n\nconst initialState = {\n   workspace: 'presentation',\n   changeWorkspace: null,\n   presentation: null,\n   loadPresentation: null,\n   isDropdownOpen: null,\n   closeDropdown: null,\n   addAsset: null,\n   isLeftSidebarOpen: true,\n   isRightSidebarOpen: true,\n   toggleLeftSidebar: null,\n   toggleRightSidebar: null,\n   changeBreakpoint: null,\n   breakpoint: 'desktop',\n   openDropdown: null,\n   addToPresentation: null,\n   selectedItem: null,\n   selectItem: null,\n   modalChildren: null,\n   openModal: null,\n   closeModal: null,\n   setImageCrop: null,\n   setImageBlob: null,\n   isModalOpen: false,\n   removeItem: null,\n   removeClass: null,\n   addClass: null,\n   addComponent: null,\n   toggleDragging: null,\n   isDragging: false,\n   dragEvent: null,\n   dropEvent: null,\n   handleOnDrag: null,\n   handleOnDrop: null,\n   component: null,\n   asset: null,\n   selectAsset: null,\n   modalPosition: {\n       x: null,\n       y: null\n   },\n   selectComponent: null\n}\n\n\n\nexport const GlobalContext = createContext(initialState)\n\nexport const GlobalProvider = (props) => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    let query = useQuery();\n\n    const changeWorkspace = (workspace) => {\n        dispatch({\n            type: CHANGE_WORKSPACE,\n            payload: {\n                isDropdownOpen: null,\n                workspace\n            }\n        })\n    }\n\n    const closeDropdown = () => {\n        dispatch({\n            type: CLOSE_DROPDOWN,\n            payload: null\n        })\n    }\n\n    const openDropdown = (event) => {\n        dispatch({\n            type: OPEN_DROPDOWN,\n            payload: event.currentTarget\n        })\n    }\n\n    const toggleLeftSidebar = () => {\n        dispatch({\n            type: TOGGLE_LEFT_SIDEBAR,\n            payload: !state.isLeftSidebarOpen\n        })\n    }\n\n    const toggleRightSidebar = () => {\n        dispatch({\n            type: TOGGLE_RIGHT_SIDEBAR,\n            payload: !state.isRightSidebarOpen\n        })\n    }\n\n    const changeBreakpoint = (breakpoint) => {\n        dispatch({\n            type: CHANGE_BREAKPOINT,\n            payload: breakpoint\n        })\n    }\n\n    const loadPresentation = async (presentation) => {\n        try {\n         \n            if (!presentation) {\n                const data = {\n                    id: \"2e38c05f-e466-4536-889b-12d62a8a63a4\",\n                    name: \"presentation\",\n                    extension: \"MEPSP\",\n                    size: \"329KB\",\n                    date: new Date().toLocaleString(),\n                    items: [],\n                    assets: [],\n                    toc: []\n                }\n                await localforage.setItem('presentation', data)\n                dispatch({\n                    type: LOAD_PRESENTATION,\n                    payload: data\n                })\n            } else {\n                await localforage.setItem('presentation', presentation)\n                dispatch({\n                    type: LOAD_PRESENTATION,\n                    payload: presentation\n                })\n            }\n\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    const toggleDragging = (boolean) => {\n        dispatch({\n            type: TOGGLE_DRAGGING,\n            payload: boolean\n        })\n    }\n\n    const handleOnDrag = (event) => {\n      \n        dispatch({\n            type: ON_DRAG,\n            payload: event\n        })\n    }\n\n    const handleOnDrop = (event) => {\n        console.log(event)\n        console.log(state.selectedItem)\n        dispatch({\n            type: ON_DROP,\n            payload: event\n        })\n    }\n\n    const addAsset = async (data) => {\n\n        let _presentation = await localforage.getItem('presentation');\n        if (_presentation) {\n            _presentation.assets.push(data)\n            if (data.extension === 'MEPSA') {\n                // TOC Concept\n                let filteredTOCArticles = _presentation.toc.filter(article => article.id === data.id);\n                if (filteredTOCArticles.length > 0) {\n                  return alert(\"Already exists\")\n                }\n\n\n\n                _presentation.toc.push(data)\n            }\n            await localforage.setItem('presentation', _presentation)\n        }\n        dispatch({\n            type: ADD_ASSET,\n            payload: _presentation\n        })\n    }\n\n    const removeClass = async (item, className) => {\n        let _presentation = await localforage.getItem('presentation');\n\n        if (_presentation && _presentation.items.length > 0 ) {\n\n            let itemIndex = _presentation.items.findIndex(el => el.id === item.id);\n            let newClassList = item.classlist.filter(c => c !== className);\n            item.classlist = newClassList;\n            _presentation.items[itemIndex] = item;\n            await localforage.setItem('presentation', _presentation);\n            dispatch({\n                type: LOAD_PRESENTATION,\n                payload: _presentation\n            })\n\n        } \n\n    }\n\n    const addClass = async (item, newClassList) => {\n        let _presentation = await localforage.getItem('presentation');\n\n        if (_presentation && _presentation.items.length > 0 ) {\n\n            let itemIndex = _presentation.items.findIndex(el => el.id === item.id);\n            item.classlist = newClassList;\n            _presentation.items[itemIndex] = item;\n            await localforage.setItem('presentation', _presentation);\n            dispatch({\n                type: LOAD_PRESENTATION,\n                payload: _presentation\n            })\n\n        } \n\n    }\n\n    // Array.prototype.swapItems = function(a, b){\n    //     this[a] = this.splice(b, 1, this[a])[0];\n    //     return this;\n    // }\n\n    // const swapElements = (array, indexA, indexB) => {\n    //     var temp = array[indexA];\n    //     array[indexA] = array[indexB];\n    //     array[indexB] = temp;\n    //     return array;\n    //   };\n\n      function array_move(arr, old_index, new_index) {\n        if (new_index >= arr.length) {\n            var k = new_index - arr.length + 1;\n            while (k--) {\n                arr.push(undefined);\n            }\n        }\n        arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);\n        return arr; // for testing\n    };\n\n\n    const addToPresentation = async (item, srcIndex, targetIndex) => {\n\n        let _presentation = await localforage.getItem('presentation');\n\n        if (_presentation) {\n            if (item.extension && item.extension === 'MEPSA') {\n\n                if (_presentation.items.filter(i => i.id === item.items[0].id).length > 0) {\n                  return alert('Already Exists')\n                } \n\n                if (_presentation.items.length > 0) {\n                    _presentation.items = [\n                        ..._presentation.items,\n                        ...item.items\n                    ]\n                } else {\n                    _presentation.items = [\n                        ...item.items\n                    ]\n                }\n                \n            } else {\n                \n                    if (srcIndex !== null && targetIndex !== null) {\n                        array_move(_presentation.items, srcIndex, targetIndex)\n                    } else if (srcIndex !== null) {\n                        _presentation.items[srcIndex] = item\n                    } else if (targetIndex !== null) {\n                        _presentation.items.splice(targetIndex, 0, item)\n                    }  else {\n                        \n                        _presentation.items.push(item)\n                    }\n                }\n            \n              \n                await localforage.setItem('presentation', _presentation)\n                dispatch({\n                    type: ADD_TO_PRESENTATION,\n                    payload: _presentation\n                })\n\n        } \n    }\n\n    const addComponent = async (component) => {\n\n        let _presentation = await localforage.getItem('presentation');\n\n            if (_presentation) {\n\n                if (_presentation.items.length > 0 && state.selectedItem) {\n                    let selectedIndex = _presentation.items.findIndex(el => el.id === state.selectedItem.id);  \n                    _presentation.items.splice(selectedIndex + 1, 0, component)\n                } \n                    await localforage.setItem('presentation', _presentation)\n                    dispatch({\n                        type: LOAD_PRESENTATION,\n                        payload: _presentation\n                    })\n            }\n       \n    }\n\n\n    const removeItem = async (item, _presentation) => {\n        \n       // let _presentation = await localforage.getItem('presentation')\n        \n        if (_presentation && _presentation.items.length > 0) {\n           \n            if (item.type === 'columns') {\n               \n                let index = _presentation.items.findIndex(el => el.id === item.id);\n                if (item.children[0].children.length > 0 && item.children[0].children.length > 0) {\n                    _presentation.items.splice(index, 0, ...item.children[0].children, ...item.children[1].children)\n                } else if (item.children[0].children.length > 0) {\n                    _presentation.items.splice(index, 0, ...item.children[0].children)\n                } else if (item.children[1].children.length > 0) {\n                    _presentation.items.splice(index, 0, ...item.children[1].children)\n                }\n            }\n\n            _presentation.items = _presentation.items.filter(el => el.id !== item.id)\n            await localforage.setItem('presentation', _presentation)\n            dispatch({\n                type: REMOVE_ITEM,\n                payload: _presentation\n            })\n        }\n        \n    }\n\n    const openModal = (children, x, y) => {\n        let _modalPosition = { x, y }\n        dispatch({\n            type: OPEN_MODAL,\n            payload: {\n                isModalOpen: true,\n                modalPosition: _modalPosition,\n                modalChildren: children,\n            }\n        })\n    }\n\n    const closeModal = () => {\n        dispatch({\n            type: CLOSE_MODAL,\n            payload: {\n                isModalOpen: false,\n                modalChildren: null,\n            }\n        })\n    }\n\n\n    const setImageCrop = async (item, crop, cropId) => {\n        let _presentation = await localforage.getItem('presentation');\n        if (_presentation && _presentation.items.length > 0) {\n\n            let imageItems = _presentation.items.filter(_item => _item.id === item.id);\n            if (imageItems.length > 0) {\n                let imageItem = imageItems[0];\n                let crops = imageItem.crops.filter(c => c.id === cropId);\n                if (crops.length > 0) {\n                    let imageCrop = {\n                        ...crops[0],\n                        x: crop.x,\n                        y: crop.y\n                    }\n                    let imageCropIndex = imageItem.crops.findIndex(el => el.id === cropId);\n                    let itemIndex = _presentation.items.findIndex(el => el.id === item.id);\n\n                    imageItem.crops[imageCropIndex] = imageCrop;\n                    _presentation.items[itemIndex] = imageItem;\n                    await localforage.setItem('presentation', _presentation);\n\n                    dispatch({\n                        type: LOAD_PRESENTATION,\n                        payload: _presentation\n                    })\n\n                    dispatch({\n                        type: SELECT_ITEM,\n                        payload: imageItem\n                    })\n                }\n            }\n            \n        }\n    }\n\n    const setImageBlob = async (item, blob, cropId) => {\n        let _presentation = await localforage.getItem('presentation');\n    \n        if (_presentation && _presentation.items.length > 0) {\n            let imageItems = _presentation.items.filter(_item => _item.id === item.id);\n            if (imageItems.length > 0) {\n                let imageItem = imageItems[0];\n                let crops = imageItem.crops.filter(c => c.id === cropId);\n                if (crops.length > 0) {\n                    let imageCropIndex = imageItem.crops.findIndex(el => el.id === cropId);\n                    let itemIndex = _presentation.items.findIndex(el => el.id === item.id);\n                    imageItem.blob = blob;\n\n                    imageItem.classlist.forEach((classKey, index) => {\n                        if (classKey.includes('img')) {\n                            imageItem.classlist.splice(index, 1);\n                        }\n                    })\n                    \n                    imageItem.classlist.push(`img_${imageItem.crops[imageCropIndex].name.toLowerCase()}`)  \n\n                    imageItem.crops[imageCropIndex] = {\n                        ...imageItem.crops[imageCropIndex],\n                        blob: blob\n                    }\n                    _presentation.items[itemIndex] = imageItem;\n                    await localforage.setItem('presentation', _presentation);\n\n                    dispatch({\n                        type: LOAD_PRESENTATION,\n                        payload: _presentation\n                    })\n\n                    dispatch({\n                        type: SELECT_ITEM,\n                        payload: imageItem\n                    })\n                }\n            }\n            \n        }\n    }\n\n    const selectItem = (item) => {\n        \n        if (item) {\n            dispatch({\n                type: SELECT_ITEM,\n                payload: item\n            })\n        }\n    }\n\n    const selectComponent = (component) => {\n        console.log(component)\n        if (component) {\n            dispatch({\n                type: SELECT_COMPONENT,\n                payload: component\n            })\n        }\n    }\n\n    const selectAsset = (asset) => {\n        console.log(asset)\n        if (asset) {\n            dispatch({\n                type: SELECT_ASSET,\n                payload: asset\n            })\n        }\n    }\n\n\n    return (\n        <GlobalContext.Provider value={{\n           workspace: state.workspace,\n           breakpoint: state.breakpoint,\n           presentation: state.presentation,\n           isDropdownOpen: state.isDropdownOpen,\n           isLeftSidebarOpen: state.isLeftSidebarOpen,\n           isRightSidebarOpen: state.isRightSidebarOpen,\n           loadPresentation,\n           setImageCrop,\n           addAsset,\n           openDropdown,\n           changeBreakpoint,\n           closeDropdown,\n           toggleRightSidebar,\n           toggleLeftSidebar,\n           changeWorkspace,\n           openModal,\n           setImageBlob,\n           addToPresentation,\n           isModalOpen: state.isModalOpen,\n           selectItem,\n           closeModal,\n           removeItem,\n           modalChildren: state.modalChildren,\n           selectedItem: state.selectedItem,\n           modalPosition: state.modalPosition,\n           removeClass,\n           addClass,\n           addComponent,\n           toggleDragging,\n           components: state.components,\n           isDragging: state.isDragging,\n           handleOnDrop,\n           handleOnDrag,\n           dragEvent: state.dragEvent,\n           dropEvent: state.dropEvent,\n           selectComponent,\n           selectAsset,\n           component: state.component,\n           asset: state.asset\n        }}>\n            {props.children}\n        </GlobalContext.Provider>\n    )\n}\n","/Users/manuel/Desktop/inscribe-app/src/store/AppReducer.js",[],"/Users/manuel/Desktop/inscribe-app/src/store/ActionTypes.js",[],"/Users/manuel/Desktop/inscribe-app/src/assets/icons/DownloadIcon.js",[],"/Users/manuel/Desktop/inscribe-app/src/assets/icons/UpdateIcon.js",[],"/Users/manuel/Desktop/inscribe-app/src/assets/icons/TrashIcon.js",[],"/Users/manuel/Desktop/inscribe-app/src/utils/useQuery.js",[],"/Users/manuel/Desktop/inscribe-app/src/components/AssetCollapsible.jsx",["223"],"/Users/manuel/Desktop/inscribe-app/src/components/DraggableItem.jsx",[],"/Users/manuel/Desktop/inscribe-app/src/components/ColumnItemEditor.jsx",["224"],"import React, { useContext } from 'react'\n// import ContentEditable from 'react-contenteditable'\nimport CloseIcon from './../assets/icons/close-white.svg';\nimport { ReactSVG } from 'react-svg';\nimport CropIcon from './../assets/icons/crop.svg';\nimport { GlobalContext } from '../store/GlobalState';\nimport ImageCropper from './modal/ImageCropper';\n\n\nexport default function ColumnItemEditor(props) {\n\n    const { selectItem, selectedItem, openModal, removeItem, removeClass } = useContext(GlobalContext);\n\n\n    const blockType = () => {\n        switch (props.block.type) {\n            case 'text':\n                return <div id={props.block.id} className={props.block.classlist && props.block.classlist.toString().replace(',', ' ')}>{props.block.text}</div>\n                // <ContentEditable\n                //     tagName=\"div\"\n                //     id={props.block.id}\n                //     className={props.block.classlist.toString().replace(',', ' ')}\n                //     html={props.block.data}\n                //     disabled={selectedItem && !selectedItem.id === props.block.id}\n\n                // />\n            case 'image':\n                return <img contentEditable={true} className={props.block.classlist && props.block.classlist.toString().replace(',', ' ')} alt={props.block.name} src={props.block.blob} />\n            case 'container':\n                return <div  id={props.block.id} className={ props.block.classlist && props.block.classlist.toString().replace(',', ' ')}>{\n                    props.block && props.block.children && props.block.children.map((item, i) => {\n                        if (item.type === 'text') {\n                            // return <ContentEditable\n                            //     tagName=\"span\"\n                            //     key={i}\n                            //     id={item.id}\n                            //     className={item.classlist.toString().replace(',', ' ')}\n                            //     html={item.data}\n                            //     disabled={selectedItem && !selectedItem.id === props.block.id}\n                            // />\n                            return <span key={i} className={item.classlist.toString().replace(',', ' ')}>{item.text}</span>\n                        }\n                        if (item.type === 'link') {\n                            return <a key={i} href={window.location.URL} id={props.block.id} className={item.classlist.toString().replace(',', ' ')}>{item.text}</a>\n                        }\n                        return null\n                    })\n                }\n                </div>\n\n            default:\n                break;\n        }\n    }\n\n    return (\n        <div id={props.block.id} >\n            <div onClick={(e) => { selectItem(props.block) }}>\n                {\n                    selectedItem && selectedItem.id === props.block.id ?\n                        <div className=\"flex mt-2\">\n                            \n                            {\n                                props.block && props.block.classlist && props.block.classlist.length > 0 && props.block.classlist.map((c, i) => {\n                                    return <button key={i} className=\"text-white text-xs py-1 px-2 mr-1 bg-indigo-600 rounded-sm mb-0 inline-flex items-center\">.{c}<span className=\"ml-2\"><img style={{ width: 10 }} src={CloseIcon} alt=\"remove class\" onClick={() => removeClass(props.block, c)} /></span></button>\n                                })\n                            }\n                        </div> : null\n                }\n\n\n                <div className={`border-indigo-300 bg-white border-dashed rounded-sm relative w-full ${selectedItem && selectedItem.id === props.block.id ? 'border mb-3' : 'border-0 mb-0 p-0'} `}>{blockType()}\n\n                    {\n                        selectedItem && selectedItem.id === props.block.id ?\n                            <div className=\"absolute -right-4 top-1/2 p-1 transform -translate-y-1/2  rounded inline-flex flex-col items-center justify-center z-20\">\n                                {\n                                    props.block.type === 'image' ?\n                                        <button\n                                            onClick={() => {\n                                                openModal(<ImageCropper />)\n                                            }}\n                                            className=\"p-2 bg-indigo-600 hover:bg-indigo-800 rounded\">\n                                            <ReactSVG src={CropIcon}\n                                                beforeInjection={(svg) => {\n                                                    svg.setAttribute('style', 'stroke: white; width: 18px; height: 18px;')\n                                                }}\n                                            />\n                                        </button> :\n                                        null\n                                }\n\n                                {/* <button className={`p-2 bg-indigo-600 hover:bg-indigo-700 rounded cursor-move ${props.block.type === 'image' ? 'mt-1' : ''}`} onClick={() => removeItem(props.block)}>\n                                    <ReactSVG src={TrashIcon} />\n                                </button> */}\n                                \n\n                            </div> : null\n                    }\n                </div>\n            </div>\n        </div>\n\n    )\n}\n","/Users/manuel/Desktop/inscribe-app/src/components/sidebar/Properties.jsx",["225"],"import React from 'react'\nimport { useContext } from 'react'\nimport Collaspible from '../Collaspible';\nimport ColorPicker from './../extensions/ColorPicker';\nimport ColorPickerButton from './../buttons/ColorPickerButton';\nimport PropertyHeading from './../extensions/PropertyHeading';\nimport { GlobalContext } from './../../store/GlobalState';\n\nexport default function Properties() {\n\n    const { selectedItem, component, openModal } = useContext(GlobalContext)\n\n    const textProperties = {\n        title: 'Text',\n        properties: [\n            {\n                name: 'Color',\n                children: <ColorPickerButton onClick={(e) => {\n                    openModal(<ColorPicker />, e.clientX - 300, e.clientY - 20)\n                }} />\n            },\n            {\n                name: 'Style',\n                children: <button>Bold</button>\n            },\n            {\n                name: 'Size',\n                children: <button>Small</button>\n            },\n            {\n                name: 'Letter Spacing',\n                children: <button>Small</button>\n            }\n        ]\n    }\n\n    const borderProperties = {\n        title: 'Border',\n        properties: [\n            {\n                name: 'Color',\n                children: <button \n                onClick={(e) => {\n                    openModal(<ColorPicker />, e.clientX, e.clientY)\n                }}>Test</button>\n            },\n            {\n                name: 'Width',\n                children: <button>Bold</button>\n            },\n            {\n                name: 'Style',\n                children: <button>Small</button>\n            },\n            {\n                name: 'Sides',\n                children: <button>Small</button>\n            }\n        ]\n    }\n\n    const columnsProperties = {\n        title: 'Columns',\n        properties: [\n            {\n                children: <button>test</button>\n            }\n        ]\n    }\n\n    return (\n        <Collaspible title=\"Properties\" >\n            \n            <PropertyHeading title={textProperties.title} properties={textProperties.properties} />\n\n            <PropertyHeading title={borderProperties.title} properties={borderProperties.properties} />\n\n            {\n                \n                component && component.type === 'columns' ?\n                <PropertyHeading title={columnsProperties.title} properties={columnsProperties.properties} /> : null\n            }\n\n        </Collaspible>\n    )\n}\n","/Users/manuel/Desktop/inscribe-app/src/components/buttons/ColorPickerButton.jsx",[],"/Users/manuel/Desktop/inscribe-app/src/App.jsx",[],"/Users/manuel/Desktop/inscribe-app/src/pages/Dashboard.jsx",[],"/Users/manuel/Desktop/inscribe-app/src/pages/ArticleEditor.jsx",["226"],"/Users/manuel/Desktop/inscribe-app/src/pages/Home.jsx",[],"/Users/manuel/Desktop/inscribe-app/src/pages/Extensions.jsx",[],"/Users/manuel/Desktop/inscribe-app/src/pages/EditorView.jsx",["227"],"/Users/manuel/Desktop/inscribe-app/src/components/topbar/DashboardBar.jsx",[],"/Users/manuel/Desktop/inscribe-app/src/components/topbar/TopBar.jsx",["228"],"import React, { useContext } from 'react'\nimport { ReactSVG } from 'react-svg'\nimport { GlobalContext } from '../../store/GlobalState'\nimport AddView from './../modal/AddView';\nimport ArticleToolbar from './ArticleToolbar'\nimport DesignToolbar from './DesignToolbar';\nimport './../../pages/ArticleEditor.css';\nimport SideLeftIcon from './../../assets/icons/side-left.svg';\nimport SideRightIcon from './../../assets/icons/side-right.svg';\n\nexport default function TopBar() {\n\n    const { workspace, selectItem, toggleLeftSidebar, changeWorkspace, toggleRightSidebar, isLeftSidebarOpen, isRightSidebarOpen, openModal } = useContext(GlobalContext);\n\n\n    // const items = [\n    //     {\n    //         id: 0,\n    //         icon: <img className=\"mr-3\" width=\"20\" src={InscribeIcon} alt=\"\" />,\n    //         text: 'Writing',\n    //         disabled: false,\n    //         action: () => changeWorkspace(\"article\"),\n    //         description: 'Includes article writing and editing tools'\n    //     },\n    //     {\n    //         id: 1,\n    //         icon: <img className=\"mr-3\" width=\"20\" src={PageFlowIcon} alt=\"\" />,\n    //         text: 'Design',\n    //         action: () => changeWorkspace(\"presentation\"),\n    //         disabled: false,\n    //         description: 'Digital content layout and presentation tools.'\n    //     },\n    // ]\n\n    return (\n        <div onClick={() => selectItem(null)} className=\"flex fixed w-full border-b border-gray-100 px-4 flex-row justify-between py-2 z-50 bg-gray-50 \">\n                    <button className={`p-2 rounded bg-gray-900 ${isLeftSidebarOpen ? 'bg-opacity-5' : 'bg-opacity-0'}  hover:bg-opacity-5`} onClick={() => toggleLeftSidebar(isLeftSidebarOpen)}>\n                        <ReactSVG src={SideLeftIcon} />\n                    </button>\n                    {\n                        workspace === 'presentation' ? <DesignToolbar /> : <ArticleToolbar />\n                    }\n                    <div className=\"flex items-center\">\n                        {/* <InsMenu items={items} title=\"Workspace\">\n                            <div className=\"hasDropdown p-2 rounded cursor-pointer bg-gray-900 bg-opacity-0 hover:bg-opacity-5\">\n                                <img style={{ float: 'left' }} src={workspace === \"presentation\" ? PageFlowIcon : InscribeIcon} alt=\"\" />\n                            </div>\n                        </InsMenu> */}\n                        <button className=\"p-2 rounded bg-gray-900 bg-opacity-0 hover:bg-opacity-5\" onClick={(e) => {\n                            console.log(e)\n                            openModal(<AddView />, e.pageX - 400, e.pageY - 30)}}>\n                            <ReactSVG src=\"/images/add.svg\"/>\n                        </button>\n                        <button className={`p-2 mr-2 rounded bg-gray-900 ${isRightSidebarOpen ? 'bg-opacity-5' : 'bg-opacity-0'}  hover:bg-opacity-5`} onClick={() => toggleRightSidebar(isRightSidebarOpen)}>\n                            <ReactSVG src={SideRightIcon} />\n                        </button>\n                    </div>\n                </div>\n    )\n}\n","/Users/manuel/Desktop/inscribe-app/src/components/topbar/PrototypeNav.jsx",[],"/Users/manuel/Desktop/inscribe-app/src/components/ExtensionCard.jsx",[],"/Users/manuel/Desktop/inscribe-app/src/components/DropZoneFile.jsx",["229"],"import React, { useEffect } from \"react\";\nimport { useContext } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { GlobalContext } from \"../store/GlobalState\";\nimport DragDropIcon from \"./../assets/icons/drag.svg\";\n\nimport { v4 } from 'uuid';\nimport { useHistory, useLocation } from \"react-router-dom\";\nfunction DropZoneFile(props) {\n\n  const { addAsset, toggleLeftSidebar } = useContext(GlobalContext);\n  const location = useLocation();\n  const history = useHistory();\n  const {\n    getRootProps,\n    getInputProps,\n    acceptedFiles,\n    isDragActive,\n  } = useDropzone();\n\n  \n\n  useEffect(() => {\n\n    acceptedFiles.map(file => {\n    \n      if (file.type === 'image/jpeg') {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onloadend = () => {\n          let asset = {\n            id: v4(),\n            date: new Date().toLocaleString(),\n            extension: 'JPEG',\n            classlist:[],\n            description: 'image',\n            type: 'image',\n            size: `${file.size}KB`,\n            text: file.name,\n            name: file.name,\n            raw: reader.result,\n            blob: reader.result,\n            crops: [\n              {\n                blob: null,\n                id: v4(),\n                name: 'SQR',\n                height: 224,\n                width: 224,\n                unit: \"px\",\n                x: 0,\n                y: 0\n              },\n              {\n                blob: null,\n                id: v4(),\n                name: 'PNR',\n                height: 267,\n                width: 801,\n                unit: \"px\",\n                x: 0,\n                y: 0\n              },\n              {\n                id: v4(),\n                blob: null,\n                name: 'LSR',\n                height: 400,\n                width: 800,\n                unit: \"px\",\n                x: 0,\n                y: 0\n              },\n            ]\n          }\n          addAsset(asset)\n         // console.log(reader.result)\n        }\n      }\n\n\n      if (file.type === 'application/json') {\n        file.text().then(article => {\n          let file = JSON.parse(article);\n            if (file && file.extension === 'MEPSA') {\n              \n              if (location.pathname === '/home') {\n                history.push('/editor')\n                setTimeout(() => {\n                  addAsset(file)\n                  toggleLeftSidebar(true)\n                }, 1000)\n\n              } else {\n                addAsset(file)\n              }\n            }\n        })\n      }\n      return null\n    });\n  }, [acceptedFiles])\n\n  return (\n    <div className=\"flex justify-center content-center mb-4\" {...props}>\n      <div\n        {...getRootProps({\n          onDrop: event => {\n            console.log(acceptedFiles)\n            \n          },\n          className: `${\n            isDragActive\n              ? \"bg-indigo-700 border-indigo-200\"\n              : \"bg-gray-900 border-gray-100\"\n          } bg-gray-100 p-3 flex-grow rounded flex justify-center border-dashed border-2 focus:outline-none focus:border-4 focus:border-indigo-700 flex-col bg-opacity-5`,\n        })}\n      >\n        <input  {...getInputProps({className: \"min-w-full\" })} />\n        <div className=\"flex justify-center flex-wrap self-center\">\n            <img src={DragDropIcon} width=\"32\" className=\"my-4 opacity-30\" alt=\"\" />\n        </div>\n        <div className=\"mx-auto flex justify-center flex-wrap self-center\">\n          <p\n            className={`${\n              isDragActive ? \"text-indigo-300\" : \"text-gray-300\"\n            } self-center text-gray-300  text-center`}\n          >\n            Drag and drop file here. <br />\n            <button className=\"px-2 py-1 text-gray-400 rounded border mt-2 border-gray-100 mr-1 text-sm hover:bg-gray-100\">Upload</button>\n          </p>\n          \n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default DropZoneFile;\n","/Users/manuel/Desktop/inscribe-app/src/components/sidebar/TemplatesBar.jsx",[],"/Users/manuel/Desktop/inscribe-app/src/components/sidebar/SideBarRight.jsx",[],"/Users/manuel/Desktop/inscribe-app/src/components/ColumnsEditor.jsx",[],"/Users/manuel/Desktop/inscribe-app/src/components/DroppableZone.jsx",["230"],"import React from 'react'\nimport { useDrop } from 'react-dnd';\nimport {  useDragLayer } from 'react-dnd';\nimport { useContext } from 'react';\nimport { GlobalContext } from '../store/GlobalState';\nimport localforage from 'localforage';\n\n\nexport default function DroppableZone(props) {\n\n  const { presentation, loadPresentation } = useContext(GlobalContext)\n  const isDragging = useDragLayer(\n    monitor => monitor.isDragging()\n  );\n\n  function array_move(arr, old_index, new_index) {\n    if (new_index >= arr.length) {\n        var k = new_index - arr.length + 1;\n        while (k--) {\n            arr.push(undefined);\n        }\n    }\n    arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);\n    return arr; // for testing\n};\n\n\n\n  const handleOnDrop = async (item, type) => {\n\n    let _presentation = await localforage.getItem('presentation');\n\n    console.log(presentation)\n    if (_presentation && item) {\n      \n        if (type === 'ASSET') { \n\n        if (props.type === 'block') {   \n            let targetIndex = _presentation.items.findIndex(el => el.id === props.id);\n            _presentation.items[targetIndex] = item;\n            loadPresentation(_presentation);\n        }\n\n        if (props.type === 'top') {\n          \n          if (item.extension && item.extension === 'MEPSA') {\n           \n            console.log(_presentation)\n            _presentation.items = [\n                ...item.items,\n                ..._presentation.items\n              ]\n\n          } else {\n            _presentation.items.unshift(item)\n          }\n            loadPresentation(_presentation);\n        }\n\n        if (props.type === 'bottom') {   \n          _presentation.items = [\n              ..._presentation.items,\n              item\n            ]\n          loadPresentation(_presentation);\n        }\n\n\n\n        // if (props.type === 'column' && props.parent) {\n        //     let columnsIndex = presentation.items.findIndex(el => el.id === props.parent.id);\n        //     let columns = props.parent;\n        //     let columnIndex = columns.children.findIndex(el => el.id === props.id);\n        //     columns.children[columnIndex].children.push(item);\n        //     return setTimeout(() => addToPresentation(columns, columnsIndex, columnIndex), 500)\n        // }\n\n        }\n\n\n    }\n      \n  }\n\n    const [{ isOver }, drop] = useDrop(() => ({\n        accept: ['ASSET', 'ITEM'],\n        drop: (item, monitor) => handleOnDrop(item, monitor.getItemType()),\n        collect: (monitor) => ({\n          isOver: monitor.isOver()\n        })\n      }))\n\n    return (\n    <>\n        {\n            props.children ? <div \n              ref={drop}\n              id={`${props.type}-${props.id}`} \n              style={{ height: isOver ? 200 : 'auto', transition: 'all ease-in-out .2s' }}\n              className={`${isDragging ? 'border' : ''} ${isOver ? 'bg-indigo-50 bg-opacity-50' : ''}  border-indigo-100 border-dashed`}\n            >{props.children}</div> :\n            <div \n                ref={drop}\n                id={`${props.type}-placeholder`} \n                style={{ minHeight: isDragging ? 50 : 0, height: isOver ? 150 : 'auto', transition: 'all ease-in-out .2s' }}\n                className={`relative ${isDragging ? 'border' : ''} ${isOver ? 'bg-indigo-50 bg-opacity-50' : ''}  border-indigo-100 border-dashed`}\n            ></div>\n        }\n    </>\n      \n        \n    )\n}\n","/Users/manuel/Desktop/inscribe-app/src/components/BlockEditor.jsx",["231"],"import React, { useContext } from 'react'\n// import ContentEditable from 'react-contenteditable'\nimport PlusIcon from './../assets/icons/plus-white.svg';\nimport CloseIcon from './../assets/icons/close-white.svg';\nimport { ReactSVG } from 'react-svg';\nimport CropIcon from './../assets/icons/crop.svg';\nimport TrashIcon from './../assets/icons/trash.svg';\nimport { GlobalContext } from '../store/GlobalState';\nimport ImageCropper from './modal/ImageCropper';\nimport AddView from './modal/AddView';\nimport { useDrag } from 'react-dnd'\n\nexport default function BlockEditor(props) {\n\n    const { selectItem, selectedItem, openModal, removeItem, removeClass, presentation } = useContext(GlobalContext);\n\n\n    const blockType = () => {\n        switch (props.block.type) {\n            case 'text':\n                return <div id={props.block.id} className={props.block.classlist && props.block.classlist.join(' ')}>{props.block.text}</div>\n                // <ContentEditable\n                //     tagName=\"div\"\n                //     id={props.block.id}\n                //     className={props.block.classlist.toString().replace(',', ' ')}\n                //     html={props.block.data}\n                //     disabled={selectedItem && !selectedItem.id === props.block.id}\n\n                // />\n            case 'image':\n                return <img contentEditable={true} className={props.block.classlist && props.block.classlist.join(' ')} alt={props.block.name} src={props.block.blob} />\n            case 'container':\n                \n                return <div  id={props.block.id} className={ props.block.classlist && props.block.classlist.join(' ')}>{\n                    props.block && props.block.children && props.block.children.map((item, i) => {\n                        if (item.type === 'text') {\n                            // return <ContentEditable\n                            //     tagName=\"span\"\n                            //     key={i}\n                            //     id={item.id}\n                            //     className={item.classlist.toString().replace(',', ' ')}\n                            //     html={item.data}\n                            //     disabled={selectedItem && !selectedItem.id === props.block.id}\n                            // />\n                            return <span key={i} className={item.classlist.join(' ')}>{item.text}</span>\n                        }\n                        if (item.type === 'link') {\n                            return <a key={i} href={window.location.URL} id={props.block.id} className={item.classlist.join(' ')}>{item.text}</a>\n                        }\n                        return null\n                    })\n                }\n                </div>\n\n            default:\n                break;\n        }\n    }\n\n    return (\n        <div id={props.block && props.block.id} >\n            <div onClick={(e) => { selectItem(props.block) }}>\n                {\n                    selectedItem && selectedItem.id === props.block.id ?\n                        <div className=\"flex mt-2\">\n                            \n                            {\n                                props.block && props.block.classlist && props.block.classlist.length > 0 && props.block.classlist.map((c, i) => {\n                                    return <button key={i} className=\"text-white text-xs py-1 px-2 mr-1 bg-indigo-600 rounded-sm mb-0 inline-flex items-center\">.{c}<span className=\"ml-2\"><img style={{ width: 10 }} src={CloseIcon} alt=\"remove class\" onClick={() => removeClass(props.block, c)} /></span></button>\n                                })\n                            }\n                        </div> : null\n                }\n\n\n                <div className={`border-indigo-300 bg-white border-dashed rounded-sm relative w-full ${selectedItem && selectedItem.id === props.block.id ? 'border mb-3' : 'border-0 mb-0 p-0'} `}>{blockType()}\n                \n                    {\n                        selectedItem && selectedItem.id === props.block.id ?\n                            <div className=\"absolute -bottom-4 left-1/2 p-1 transform -translate-x-1/2 bg-indigo-600 rounded inline-flex items-center justify-center z-20\">\n                                <button className=\"p-1 hover:bg-indigo-700 rounded\" onClick={(e) => openModal(<AddView />, e.clientX - 300, '50%')}>\n                                    <ReactSVG src={PlusIcon} />\n                                </button>\n                            </div> : null\n                    }\n\n                    {\n                        selectedItem && selectedItem.id === props.block.id ?\n                            <div className=\"absolute -right-4 top-1/2 transform -translate-y-1/2  rounded inline-flex flex-col items-center justify-center z-20 bg-white  shadow\">\n                                {\n                                    props.block.type === 'image' ?\n                                        <button\n                                            onClick={(e) => {\n                                                console.log(e)\n                                               \n                                                openModal(<ImageCropper />, 0, \"0%\")\n                                            }}\n                                            className=\"p-2 hover:bg-gray-50 rounded\">\n                                            <ReactSVG src={CropIcon}\n                                                beforeInjection={(svg) => {\n                                                    svg.setAttribute('style', 'width: 16px; height: 16px;')\n                                                }}\n                                            />\n                                        </button> :\n                                        null\n                                }\n\n                            <button className={`p-2 hover:bg-gray-50 rounded cursor-pointer`} onClick={() => removeItem(props.block, presentation)}>\n                                <ReactSVG src={TrashIcon} />\n                            </button>\n                                \n\n                            </div> : null\n                    }\n                </div>\n            </div>\n        </div>\n\n    )\n}\n","/Users/manuel/Desktop/inscribe-app/src/components/topbar/ArticleToolbar.jsx",[],"/Users/manuel/Desktop/inscribe-app/src/components/topbar/DesignToolbar.jsx",[],"/Users/manuel/Desktop/inscribe-app/src/components/FileTemplate.jsx",[],"/Users/manuel/Desktop/inscribe-app/src/components/Collaspible.jsx",[],"/Users/manuel/Desktop/inscribe-app/src/components/buttons/EditButton.jsx",[],"/Users/manuel/Desktop/inscribe-app/src/components/modal/AddView.jsx",["232"],"import React, { useContext, useEffect } from 'react';\nimport { ReactSVG } from 'react-svg';\nimport AssetPicker from './../extensions/AssetPicker';\nimport Components  from './../extensions/Components';\nimport HeaderTitle from './HeaderTitle';\nimport CloseIcon from './../../assets/icons/close.svg';\nimport { GlobalContext } from './../../store/GlobalState';\nexport default function AddView() {\n\n    const { closeModal, isLeftSidebarOpen, selectAsset, selectComponent } = useContext(GlobalContext)\n\n    useEffect(() => {\n        selectAsset(null)\n        selectComponent(null)\n    })\n\n    return (\n        <div style={{ maxWidth: 400 }}>\n            <HeaderTitle title=\"Add\">\n                <button\n                    onClick={() => closeModal()}\n                    className=\"p-2 hover:bg-gray-900 rounded\">\n                    <ReactSVG src={CloseIcon} />\n                </button>\n            </HeaderTitle>\n            <div className=\"overflow-scroll\" style={{ maxHeight: 500, paddingBottom: 0 }}>\n                <AssetPicker />\n                <Components />\n                </div>\n        </div>\n    )\n}\n","/Users/manuel/Desktop/inscribe-app/src/components/modal/HeaderTitle.jsx",[],"/Users/manuel/Desktop/inscribe-app/src/components/extensions/ColorPicker.jsx",["233"],"import React, { useContext, useState } from 'react';\nimport Collaspible from '../Collaspible';\nimport HeaderTitle from './../modal/HeaderTitle';\nimport colors from '../../assets/json/colors.json';\nimport tokens from '../../assets/json/tokens.json';\nimport _ from \"lodash\";\nimport { GlobalContext } from '../../store/GlobalState';\nfunction ColorButton({ value, name, color }) {\n\n    const { selectedItem, addClass, closeModal } = useContext(GlobalContext)\n\n    return (\n        <button \n            onClick={() => {\n                if (selectedItem && selectedItem.classlist) {\n                    \n                    let hasColor = selectedItem && selectedItem.classlist && selectedItem.classlist.join(' ').includes('color');\n\n                    let colorClassIndex = selectedItem && selectedItem.classlist && selectedItem.classlist.findIndex(item => item.includes('color'));\n                    \n                    var classList;\n\n                    if (color) {\n                    // It means @color is part of\n                    // the extended palette.\n                    // So in that case, we add the \n                    // shade/tint value.\n                        if (hasColor) {\n                            // check if current item\n                            // already has a color value.\n                            selectedItem.classlist[colorClassIndex] = `color-${color}-${name}`\n                        } else {\n                            selectedItem.classlist.push(`color-${color}-${name}`)\n                        }\n                    } else {\n                        if (hasColor) {\n                            // check if current item\n                            // already has a color value.\n                            selectedItem.classlist[colorClassIndex] = `color-${name.toLowerCase()}`\n                        } else {\n                            selectedItem.classlist.push(`color-${name.toLowerCase()}`)\n                        }\n                    }\n\n                    classList = selectedItem.classlist;\n                    \n                    addClass(selectedItem, classList);\n                    closeModal()\n                }\n                \n            }}\n            className=\"px-3 py-1 text-left text-sm border border-gray-200 font-semibold\"\n            style={{ backgroundColor: value, color: name === 'Black' || Number(name) > 400 ? 'white' : 'black' }}\n        >{name}</button>\n    )\n}\n\nfunction ColorPicker() {\n\n    const filteredTokens = tokens.entities.filter(color => {\n        return color.type === 'color'\n    })\n\n    const [search, setSearch] = useState('');\n\n    const newTokens = filteredTokens.map(token => {\n        return {\n            name: token.name.split(' ')[0],\n            color: token.name,\n            number: token.name.split(' ').length > 2 ? Number(token.name.split(' ')[2]) : Number(token.name.split(' ')[1]),\n            value: token.value\n        }\n    })\n\n   const groups = _.groupBy(newTokens, 'name')\n    return (\n        <div>\n           \n            <HeaderTitle title=\"Color Palette\" />\n            \n            <div className=\"px-4 pt-4\">\n                <input className=\"px-2 w-full rounded py-1 border border-gray-300 appearance-none focus:outline-none focus:border-indigo-800\" type=\"text\" \n                 placeholder=\"Search Colors\"onInput={e => setSearch(e.target.value)} />\n            </div>\n            <div className=\"overflow-scroll\" style={{ maxHeight: 500 }}>\n            <div className=\"grid grid-cols-2 gap-2 px-4 py-2\">\n                <ColorButton name={'Black'} value={colors.color.BLACK.value} />\n                <ColorButton name={'White'} value={colors.color.WHITE.value} />\n            </div>\n                {\n                  groups && Object.keys(groups).filter(item => item.toLowerCase().includes(search.toLowerCase())).map((array, key) => {\n                      return <div key={key}>\n                        <div className=\"px-4 pt-2 pb-1 font-medium text-sm\">{array}</div>\n                        <div className=\"grid grid-cols-5 gap-1 px-4\">\n                            {\n                                groups && groups[array].sort((a,b) => a.number - b.number).map((color, i) => {\n                                  return  <ColorButton\n                                    color={array.toLowerCase()}\n                                   key={i} name={color.number} value={color.value} />\n                                })\n                            }\n                        </div>\n                      </div>\n                  })\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default ColorPicker\n","/Users/manuel/Desktop/inscribe-app/src/components/modal/InsMenu.jsx",[],"/Users/manuel/Desktop/inscribe-app/src/components/extensions/PropertyHeading.jsx",[],"/Users/manuel/Desktop/inscribe-app/src/components/modal/InsModal.jsx",["234","235"],"import React, { useRef, useState } from 'react'\nimport { useContext } from 'react'\nimport { GlobalContext } from './../../store/GlobalState'\nimport Draggable from 'react-draggable';\nexport default function InsModal() {\n    const { modalChildren, closeModal, modalPosition } = useContext(GlobalContext)\n    return (\n        <div className=\"fixed h-full w-full left-0 top-0 z-50 mt-8\">\n            <div className=\"bg-white z-50 bg-opacity-0 fixed h-full w-full left-0 top-0\" onClick={() => closeModal()}></div>\n            <Draggable \n            \n            positionOffset={{ x: modalPosition.x, y: modalPosition.y }}\n            >\n                \n                    <div\n                    className=\"absolute overflow-hidden bg-gray-50 shadow-lg rounded z-50\" style={{ minWidth: 300, maxHeight: '100%' }}> \n                        {modalChildren}\n                    </div>\n                \n            </Draggable>\n        </div>\n        \n    )\n}\n","/Users/manuel/Desktop/inscribe-app/src/components/sidebar/SideBarLeft.jsx",["236"],"/Users/manuel/Desktop/inscribe-app/src/components/extensions/AssetPicker.jsx",[],"/Users/manuel/Desktop/inscribe-app/src/components/extensions/Components.jsx",[],"/Users/manuel/Desktop/inscribe-app/src/components/extensions/Component.jsx",[],"/Users/manuel/Desktop/inscribe-app/src/components/modal/ImageCropper.jsx",["237"],"import React, { useContext, useRef, useState } from 'react'\nimport ReactCrop from 'react-image-crop';\nimport { GlobalContext } from '../../store/GlobalState';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport { useEffect } from 'react';\nimport { ReactSVG } from 'react-svg';\nimport CloseIcon from './../../assets/icons/close.svg';\nimport HeaderTitle from './HeaderTitle';\n\n\nexport default function ImageCropper() {\n\n    const { selectedItem, setImageCrop, closeModal, setImageBlob } = useContext(GlobalContext);\n    const [cropIndex, setCropIndex] = useState(0);\n    const [currentCrop, setCurrentCrop] = useState({\n        y: selectedItem.crops[cropIndex].y,\n        x: selectedItem.crops[cropIndex].x,\n        width: selectedItem.crops[cropIndex].width,\n        height: selectedItem.crops[cropIndex].height,\n    });\n\n    const elementRef = useRef();\n\n    useEffect(() => {\n        setCurrentCrop({\n            y: selectedItem.crops[cropIndex].y,\n            x: selectedItem.crops[cropIndex].x,\n            width: selectedItem.crops[cropIndex].width,\n            height: selectedItem.crops[cropIndex].height,\n        })\n        \n    }, [cropIndex])\n\n    return (\n    <div style={{ maxWidth: window.screen.width / 1.5 }}>\n        <HeaderTitle title=\"Image Crop\">\n        <button\n            onClick={() => closeModal()}\n            className=\"p-2 hover:bg-gray-900 rounded\">\n            <ReactSVG src={CloseIcon} />\n        </button>\n        </HeaderTitle>\n        <div className=\"p-4 w-full\">\n            {\n                selectedItem && selectedItem.raw ?\n                    <ReactCrop\n                        className=\"rounded w-full\"\n                        locked={true}\n                        ref={elementRef}\n                        src={selectedItem.raw}\n                        crop={currentCrop}\n                        onComplete={(crop, percent) => {\n                            console.log(crop)\n                            setImageCrop(selectedItem, crop, currentCrop.id)\n                        }}\n                        onChange={newCrop => {\n                            setCurrentCrop({\n                                ...selectedItem.crops[cropIndex],\n                                width: selectedItem.crops[cropIndex].width,\n                                height: selectedItem.crops[cropIndex].height,\n                                x: newCrop.x,\n                                y: newCrop.y\n                            })\n\n                        }} /> : null\n            }\n            <div className=\"py-2 flex justify-between\" style={{ minWidth: 900, maxWidth: '100%' }}>\n                <div className=\"flex\">\n                    {\n                        selectedItem && selectedItem.crops.map((_crop, i) => {\n                            return <button\n                                onClick={() => {\n                                    setCropIndex(i)\n                                    setCurrentCrop({\n                                        ...selectedItem.crops[i],\n                                        y: selectedItem.crops[i].y,\n                                        x: selectedItem.crops[i].x,\n                                        width: selectedItem.crops[i].width,\n                                        height: selectedItem.crops[i].height,\n                                    })\n                                }}\n                                key={i}\n                                className={`px-2 py-1 rounded-sm ${cropIndex === i ? 'bg-gray-700 text-gray-50' : 'text-gray-400 bg-gray-50'} border border-gray-100 mr-1`}>{_crop.name}</button>\n                        })\n                    }\n                </div>\n                <div className=\"flex\">\n                    <button className=\"px-4 py-2 text-gray-500 bg-gray-50 hover:bg-gray-100 rounded border border-gray-100 mr-1\" onClick={() => closeModal()}>Cancel</button>\n                    <button\n                        onClick={() => {\n                            getCroppedImg(elementRef.current.imageRef, selectedItem.crops[cropIndex])\n                                .then(blob => {\n                                    setImageBlob(selectedItem, blob, selectedItem.crops[cropIndex].id)\n                                })\n                                .then(() => closeModal())\n                        }}\n                        className=\"px-4 py-2 bg-indigo-700 text-gray-100 font-medium rounded\">Select Crop</button>\n                </div>\n            </div>\n        </div>\n        </div>\n    )\n}\nfunction getCroppedImg(_image, crop, fileName) {\n\n    const canvas = document.createElement(\"canvas\");\n    // As a blob\n    return new Promise((resolve, reject) => {\n\n            const scaleX = _image.naturalWidth / _image.width;\n            const scaleY = _image.naturalHeight / _image.height;\n\n            canvas.width = crop.width;\n            canvas.height = crop.height;\n            const ctx = canvas.getContext(\"2d\");\n\n            // New lines to be added\n            const pixelRatio = window.devicePixelRatio;\n            canvas.width = crop.width * pixelRatio;\n            canvas.height = crop.height * pixelRatio;\n            ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n            ctx.imageSmoothingQuality = \"high\";\n            ctx.drawImage(\n                _image,\n                crop.x * scaleX,\n                crop.y * scaleY,\n                crop.width * scaleX,\n                crop.height * scaleY,\n                0,\n                0,\n                crop.width,\n                crop.height\n            );\n            const base64Image = canvas.toDataURL(\"image/jpeg\", 1);\n            resolve(base64Image);\n    })\n\n}","/Users/manuel/Desktop/inscribe-app/src/components/OutlineCollapsible.jsx",["238","239","240","241","242"],"import React from 'react'\nimport { useContext } from 'react';\nimport { useState } from 'react'\nimport { GlobalContext } from '../store/GlobalState';\nimport ArrowDown from './../assets/icons/arrow-down.svg';\nimport ColumnsIcon from './../assets/icons/column.svg';\nimport ImageIcon from './../assets/icons/image.svg';\nimport TextIcon from './../assets/icons/text-block.svg';\nimport DraggableItem from './DraggableItem';\n\nexport default function OutlineCollapsible(props) {\n\nconst [isOpen, setIsOpen] = useState(false);\nconst { selectedItem, selectItem, handleOnDrag } = useContext(GlobalContext)\n\n    return (\n     \n        <div className={`pl-2 cursor-move rounded ${isOpen ? '' : 'hover:bg-gray-100 hover:bg-opacity-60'}  ${selectedItem && props.item.id === selectedItem.id && !isOpen ? 'bg-gray-100' : ''} bg-opacity-60`} {...props}>\n            <div className=\"p-2 flex justify-between\">\n                <div className=\"inline-flex\">\n\n                    {\n                        props.item.type.includes('column') ? <img src={ColumnsIcon} alt=\"columns\" className=\"mr-3\" /> : null\n                    }\n\n                    {\n                        props.item.type.includes('text') ? <img src={TextIcon} alt=\"text\" className=\"mr-3\" /> : null\n                    }\n\n                    {\n                        props.item.type.includes('image') ? <img src={ImageIcon} alt=\"\" className=\"mr-3\" /> : null\n                    }\n                   \n                    <div className=\"leading-4\">\n                        <span className=\"text-gray-700 text-sm\">{props.item.text}</span> <br />\n                        <span className=\"text-gray-300 text-xs\">{props.item.description}</span>\n                    </div>\n                </div>\n                \n                <button className='cursor-pointer'>{props.icon}</button>\n            </div>\n        </div>\n    )\n}\n","/Users/manuel/Desktop/inscribe-app/src/pages/PresentationEditor.jsx",["243","244"],"/Users/manuel/Desktop/inscribe-app/src/pages/PlaceholderEditor.jsx",["245"],"/Users/manuel/Desktop/inscribe-app/src/components/sidebar/PresentationOutline.jsx",[],"/Users/manuel/Desktop/inscribe-app/src/components/sidebar/ArticleOutline.jsx",[],{"ruleId":"246","replacedBy":"247"},{"ruleId":"248","replacedBy":"249"},{"ruleId":"250","severity":1,"message":"251","line":5,"column":10,"nodeType":"252","messageId":"253","endLine":5,"endColumn":12},{"ruleId":"250","severity":1,"message":"254","line":78,"column":9,"nodeType":"252","messageId":"253","endLine":78,"endColumn":14},{"ruleId":"250","severity":1,"message":"255","line":13,"column":14,"nodeType":"252","messageId":"253","endLine":13,"endColumn":24},{"ruleId":"250","severity":1,"message":"256","line":12,"column":50,"nodeType":"252","messageId":"253","endLine":12,"endColumn":60},{"ruleId":"250","severity":1,"message":"257","line":11,"column":13,"nodeType":"252","messageId":"253","endLine":11,"endColumn":25},{"ruleId":"258","severity":1,"message":"259","line":12,"column":8,"nodeType":"260","endLine":12,"endColumn":10,"suggestions":"261"},{"ruleId":"250","severity":1,"message":"262","line":9,"column":8,"nodeType":"252","messageId":"253","endLine":9,"endColumn":26},{"ruleId":"250","severity":1,"message":"263","line":13,"column":55,"nodeType":"252","messageId":"253","endLine":13,"endColumn":70},{"ruleId":"258","severity":1,"message":"264","line":102,"column":6,"nodeType":"260","endLine":102,"endColumn":21,"suggestions":"265"},{"ruleId":"250","severity":1,"message":"266","line":16,"column":12,"nodeType":"252","messageId":"253","endLine":16,"endColumn":22},{"ruleId":"250","severity":1,"message":"267","line":11,"column":10,"nodeType":"252","messageId":"253","endLine":11,"endColumn":17},{"ruleId":"250","severity":1,"message":"268","line":10,"column":25,"nodeType":"252","messageId":"253","endLine":10,"endColumn":42},{"ruleId":"250","severity":1,"message":"269","line":2,"column":8,"nodeType":"252","messageId":"253","endLine":2,"endColumn":19},{"ruleId":"250","severity":1,"message":"270","line":1,"column":17,"nodeType":"252","messageId":"253","endLine":1,"endColumn":23},{"ruleId":"250","severity":1,"message":"271","line":1,"column":25,"nodeType":"252","messageId":"253","endLine":1,"endColumn":33},{"ruleId":"250","severity":1,"message":"272","line":13,"column":27,"nodeType":"252","messageId":"253","endLine":13,"endColumn":43},{"ruleId":"258","severity":1,"message":"273","line":32,"column":8,"nodeType":"260","endLine":32,"endColumn":19,"suggestions":"274"},{"ruleId":"250","severity":1,"message":"275","line":5,"column":8,"nodeType":"252","messageId":"253","endLine":5,"endColumn":17},{"ruleId":"250","severity":1,"message":"276","line":9,"column":8,"nodeType":"252","messageId":"253","endLine":9,"endColumn":21},{"ruleId":"250","severity":1,"message":"277","line":13,"column":16,"nodeType":"252","messageId":"253","endLine":13,"endColumn":25},{"ruleId":"250","severity":1,"message":"278","line":14,"column":23,"nodeType":"252","messageId":"253","endLine":14,"endColumn":33},{"ruleId":"250","severity":1,"message":"279","line":14,"column":35,"nodeType":"252","messageId":"253","endLine":14,"endColumn":47},{"ruleId":"250","severity":1,"message":"280","line":5,"column":8,"nodeType":"252","messageId":"253","endLine":5,"endColumn":25},{"ruleId":"258","severity":1,"message":"281","line":35,"column":7,"nodeType":"260","endLine":35,"endColumn":9,"suggestions":"282"},{"ruleId":"258","severity":1,"message":"283","line":16,"column":8,"nodeType":"260","endLine":16,"endColumn":10,"suggestions":"284"},"no-native-reassign",["285"],"no-negated-in-lhs",["286"],"no-unused-vars","'v4' is defined but never used.","Identifier","unusedVar","'query' is assigned a value but never used.","'isDragging' is assigned a value but never used.","'removeItem' is assigned a value but never used.","'selectedItem' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'changeWorkspace'. Either include it or remove the dependency array.","ArrayExpression",["287"],"'PresentationEditor' is defined but never used.","'changeWorkspace' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'addAsset', 'history', 'location.pathname', and 'toggleLeftSidebar'. Either include them or remove the dependency array.",["288"],"'array_move' is defined but never used.","'useDrag' is defined but never used.","'isLeftSidebarOpen' is assigned a value but never used.","'Collaspible' is defined but never used.","'useRef' is defined but never used.","'useState' is defined but never used.","'loadPresentation' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'selectedItem.crops'. Either include it or remove the dependency array.",["289"],"'ArrowDown' is defined but never used.","'DraggableItem' is defined but never used.","'setIsOpen' is assigned a value but never used.","'selectItem' is assigned a value but never used.","'handleOnDrag' is assigned a value but never used.","'PlaceholderEditor' is defined but never used.","React Hook useEffect has a missing dependency: 'loadPresentation'. Either include it or remove the dependency array.",["290"],"React Hook useEffect has missing dependencies: 'loadPresentation' and 'presentation'. Either include them or remove the dependency array.",["291"],"no-global-assign","no-unsafe-negation",{"desc":"292","fix":"293"},{"desc":"294","fix":"295"},{"desc":"296","fix":"297"},{"desc":"298","fix":"299"},{"desc":"300","fix":"301"},"Update the dependencies array to be: [changeWorkspace]",{"range":"302","text":"303"},"Update the dependencies array to be: [acceptedFiles, addAsset, history, location.pathname, toggleLeftSidebar]",{"range":"304","text":"305"},"Update the dependencies array to be: [cropIndex, selectedItem.crops]",{"range":"306","text":"307"},"Update the dependencies array to be: [loadPresentation]",{"range":"308","text":"309"},"Update the dependencies array to be: [loadPresentation, presentation]",{"range":"310","text":"311"},[300,302],"[changeWorkspace]",[2598,2613],"[acceptedFiles, addAsset, history, location.pathname, toggleLeftSidebar]",[1140,1151],"[cropIndex, selectedItem.crops]",[1101,1103],"[loadPresentation]",[593,595],"[loadPresentation, presentation]"]