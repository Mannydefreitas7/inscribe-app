[{"/Users/manuel/Desktop/inscribe-app/src/index.js":"1","/Users/manuel/Desktop/inscribe-app/src/App.js":"2","/Users/manuel/Desktop/inscribe-app/src/reportWebVitals.js":"3","/Users/manuel/Desktop/inscribe-app/src/pages/Dashboard.js":"4","/Users/manuel/Desktop/inscribe-app/src/store/GlobalState.jsx":"5","/Users/manuel/Desktop/inscribe-app/src/pages/ArticleEditor.js":"6","/Users/manuel/Desktop/inscribe-app/src/pages/Extensions.js":"7","/Users/manuel/Desktop/inscribe-app/src/pages/Home.js":"8","/Users/manuel/Desktop/inscribe-app/src/components/topbar/DashboardBar.js":"9","/Users/manuel/Desktop/inscribe-app/src/store/AppReducer.js":"10","/Users/manuel/Desktop/inscribe-app/src/store/ActionTypes.js":"11","/Users/manuel/Desktop/inscribe-app/src/components/topbar/ArticleToolbar.js":"12","/Users/manuel/Desktop/inscribe-app/src/components/InsMenu.js":"13","/Users/manuel/Desktop/inscribe-app/src/components/topbar/DesignToolbar.js":"14","/Users/manuel/Desktop/inscribe-app/src/components/SideBarRight.js":"15","/Users/manuel/Desktop/inscribe-app/src/components/BlockEditor.js":"16","/Users/manuel/Desktop/inscribe-app/src/components/ExtensionCard.js":"17","/Users/manuel/Desktop/inscribe-app/src/components/SideBarLeft.js":"18","/Users/manuel/Desktop/inscribe-app/src/components/DropZoneFile.js":"19","/Users/manuel/Desktop/inscribe-app/src/components/RecentContainer.js":"20","/Users/manuel/Desktop/inscribe-app/src/components/sidebar/TemplatesBar.js":"21","/Users/manuel/Desktop/inscribe-app/src/assets/icons/DownloadIcon.js":"22","/Users/manuel/Desktop/inscribe-app/src/assets/icons/UpdateIcon.js":"23","/Users/manuel/Desktop/inscribe-app/src/components/RecentFile.js":"24","/Users/manuel/Desktop/inscribe-app/src/components/Collaspible.js":"25","/Users/manuel/Desktop/inscribe-app/src/assets/icons/TrashIcon.js":"26","/Users/manuel/Desktop/inscribe-app/src/components/buttons/EditButton.js":"27","/Users/manuel/Desktop/inscribe-app/src/components/FileTemplate.js":"28","/Users/manuel/Desktop/inscribe-app/src/components/OutlineCollapsible.js":"29","/Users/manuel/Desktop/inscribe-app/src/components/InsModal.js":"30","/Users/manuel/Desktop/inscribe-app/src/components/ImageCropper.js":"31","/Users/mdefreitas/Desktop/inscribe-app/src/index.js":"32","/Users/mdefreitas/Desktop/inscribe-app/src/reportWebVitals.js":"33","/Users/mdefreitas/Desktop/inscribe-app/src/App.js":"34","/Users/mdefreitas/Desktop/inscribe-app/src/pages/Dashboard.js":"35","/Users/mdefreitas/Desktop/inscribe-app/src/pages/Extensions.js":"36","/Users/mdefreitas/Desktop/inscribe-app/src/pages/ArticleEditor.js":"37","/Users/mdefreitas/Desktop/inscribe-app/src/pages/Home.js":"38","/Users/mdefreitas/Desktop/inscribe-app/src/components/topbar/DashboardBar.js":"39","/Users/mdefreitas/Desktop/inscribe-app/src/store/GlobalState.jsx":"40","/Users/mdefreitas/Desktop/inscribe-app/src/components/DropZoneFile.js":"41","/Users/mdefreitas/Desktop/inscribe-app/src/components/topbar/DesignToolbar.js":"42","/Users/mdefreitas/Desktop/inscribe-app/src/components/topbar/ArticleToolbar.js":"43","/Users/mdefreitas/Desktop/inscribe-app/src/components/InsMenu.js":"44","/Users/mdefreitas/Desktop/inscribe-app/src/components/SideBarLeft.js":"45","/Users/mdefreitas/Desktop/inscribe-app/src/components/BlockEditor.js":"46","/Users/mdefreitas/Desktop/inscribe-app/src/components/InsModal.js":"47","/Users/mdefreitas/Desktop/inscribe-app/src/components/SideBarRight.js":"48","/Users/mdefreitas/Desktop/inscribe-app/src/components/ExtensionCard.js":"49","/Users/mdefreitas/Desktop/inscribe-app/src/components/RecentContainer.js":"50","/Users/mdefreitas/Desktop/inscribe-app/src/components/sidebar/TemplatesBar.js":"51","/Users/mdefreitas/Desktop/inscribe-app/src/store/ActionTypes.js":"52","/Users/mdefreitas/Desktop/inscribe-app/src/store/AppReducer.js":"53","/Users/mdefreitas/Desktop/inscribe-app/src/components/Collaspible.js":"54","/Users/mdefreitas/Desktop/inscribe-app/src/components/RecentFile.js":"55","/Users/mdefreitas/Desktop/inscribe-app/src/assets/icons/TrashIcon.js":"56","/Users/mdefreitas/Desktop/inscribe-app/src/components/buttons/EditButton.js":"57","/Users/mdefreitas/Desktop/inscribe-app/src/assets/icons/DownloadIcon.js":"58","/Users/mdefreitas/Desktop/inscribe-app/src/components/ImageCropper.js":"59","/Users/mdefreitas/Desktop/inscribe-app/src/components/OutlineCollapsible.js":"60","/Users/mdefreitas/Desktop/inscribe-app/src/assets/icons/UpdateIcon.js":"61","/Users/mdefreitas/Desktop/inscribe-app/src/components/FileTemplate.js":"62","/Users/mdefreitas/Desktop/inscribe-app/src/components/AddView.js":"63","/Users/mdefreitas/Desktop/inscribe-app/src/components/HeaderTitle.js":"64","/Users/mdefreitas/Desktop/inscribe-app/src/components/AssetPicker.js":"65","/Users/mdefreitas/Desktop/inscribe-app/src/components/Components.js":"66","/Users/mdefreitas/Desktop/inscribe-app/src/components/TOCView.js":"67","/Users/mdefreitas/Desktop/inscribe-app/src/components/topbar/TopBar.js":"68","/Users/mdefreitas/Desktop/inscribe-app/src/components/PresentationEditor.js":"69","/Users/mdefreitas/Desktop/inscribe-app/src/utils/useQuery.js":"70","/Users/mdefreitas/Desktop/inscribe-app/src/components/topbar/PrototypeNav.js":"71","/Users/mdefreitas/Desktop/inscribe-app/src/components/Component.js":"72","/Users/mdefreitas/Desktop/inscribe-app/src/components/ColumnsEditor.js":"73","/Users/mdefreitas/Desktop/inscribe-app/src/components/DroppableZone.js":"74","/Users/mdefreitas/Desktop/inscribe-app/src/components/DraggableItem.jsx":"75","/Users/mdefreitas/Desktop/inscribe-app/src/components/PlaceholderEditor.jsx":"76","/Users/mdefreitas/Desktop/inscribe-app/src/components/AssetCollapsible.jsx":"77","/Users/mdefreitas/Desktop/inscribe-app/src/components/ColumnItemEditor.jsx":"78"},{"size":523,"mtime":1626706933350,"results":"79","hashOfConfig":"80"},{"size":141,"mtime":1626708968924,"results":"81","hashOfConfig":"80"},{"size":362,"mtime":1626706933351,"results":"82","hashOfConfig":"80"},{"size":1232,"mtime":1626706933351,"results":"83","hashOfConfig":"80"},{"size":5293,"mtime":1626751440284,"results":"84","hashOfConfig":"80"},{"size":9631,"mtime":1626748086096,"results":"85","hashOfConfig":"80"},{"size":2145,"mtime":1626706933351,"results":"86","hashOfConfig":"80"},{"size":497,"mtime":1626725931052,"results":"87","hashOfConfig":"80"},{"size":1700,"mtime":1626706933348,"results":"88","hashOfConfig":"80"},{"size":1861,"mtime":1626751620547,"results":"89","hashOfConfig":"80"},{"size":582,"mtime":1626751485334,"results":"90","hashOfConfig":"80"},{"size":2024,"mtime":1626706933348,"results":"91","hashOfConfig":"80"},{"size":2403,"mtime":1626706933345,"results":"92","hashOfConfig":"80"},{"size":1850,"mtime":1626706933348,"results":"93","hashOfConfig":"80"},{"size":306,"mtime":1626727129734,"results":"94","hashOfConfig":"80"},{"size":3413,"mtime":1626744675097,"results":"95","hashOfConfig":"80"},{"size":1587,"mtime":1626706933344,"results":"96","hashOfConfig":"80"},{"size":3507,"mtime":1626729645537,"results":"97","hashOfConfig":"80"},{"size":3181,"mtime":1626740251169,"results":"98","hashOfConfig":"80"},{"size":1188,"mtime":1626706933346,"results":"99","hashOfConfig":"80"},{"size":912,"mtime":1626706933348,"results":"100","hashOfConfig":"80"},{"size":1127,"mtime":1626706933289,"results":"101","hashOfConfig":"80"},{"size":1222,"mtime":1626706933290,"results":"102","hashOfConfig":"80"},{"size":1100,"mtime":1626706933346,"results":"103","hashOfConfig":"80"},{"size":945,"mtime":1626706933344,"results":"104","hashOfConfig":"80"},{"size":1790,"mtime":1626706933290,"results":"105","hashOfConfig":"80"},{"size":531,"mtime":1626706933347,"results":"106","hashOfConfig":"80"},{"size":352,"mtime":1626706933345,"results":"107","hashOfConfig":"80"},{"size":1354,"mtime":1626729425700,"results":"108","hashOfConfig":"80"},{"size":653,"mtime":1626755929304,"results":"109","hashOfConfig":"80"},{"size":3113,"mtime":1626757694530,"results":"110","hashOfConfig":"80"},{"size":574,"mtime":1627684147105,"results":"111","hashOfConfig":"112"},{"size":362,"mtime":1611279264975,"results":"113","hashOfConfig":"112"},{"size":141,"mtime":1627676038048,"results":"114","hashOfConfig":"112"},{"size":1054,"mtime":1626984028852,"results":"115","hashOfConfig":"112"},{"size":2201,"mtime":1626805618809,"results":"116","hashOfConfig":"112"},{"size":2370,"mtime":1627916107038,"results":"117","hashOfConfig":"112"},{"size":464,"mtime":1627678408485,"results":"118","hashOfConfig":"112"},{"size":1860,"mtime":1626956857317,"results":"119","hashOfConfig":"112"},{"size":17003,"mtime":1627919636619,"results":"120","hashOfConfig":"112"},{"size":3936,"mtime":1627686496114,"results":"121","hashOfConfig":"112"},{"size":1850,"mtime":1626447903680,"results":"122","hashOfConfig":"112"},{"size":2024,"mtime":1626377184641,"results":"123","hashOfConfig":"112"},{"size":2546,"mtime":1626970769080,"results":"124","hashOfConfig":"112"},{"size":3262,"mtime":1627918613385,"results":"125","hashOfConfig":"112"},{"size":6238,"mtime":1627914124965,"results":"126","hashOfConfig":"112"},{"size":668,"mtime":1627409894697,"results":"127","hashOfConfig":"112"},{"size":306,"mtime":1626803623817,"results":"128","hashOfConfig":"112"},{"size":1573,"mtime":1626805372545,"results":"129","hashOfConfig":"112"},{"size":1188,"mtime":1626190476402,"results":"130","hashOfConfig":"112"},{"size":1013,"mtime":1627330366724,"results":"131","hashOfConfig":"112"},{"size":793,"mtime":1627580897239,"results":"132","hashOfConfig":"112"},{"size":2430,"mtime":1627580870915,"results":"133","hashOfConfig":"112"},{"size":1091,"mtime":1626969669907,"results":"134","hashOfConfig":"112"},{"size":927,"mtime":1627046574034,"results":"135","hashOfConfig":"112"},{"size":1790,"mtime":1611352970687,"results":"136","hashOfConfig":"112"},{"size":494,"mtime":1626805657681,"results":"137","hashOfConfig":"112"},{"size":1127,"mtime":1611353911442,"results":"138","hashOfConfig":"112"},{"size":5614,"mtime":1627409000350,"results":"139","hashOfConfig":"112"},{"size":1089,"mtime":1627685329365,"results":"140","hashOfConfig":"112"},{"size":1222,"mtime":1611352976696,"results":"141","hashOfConfig":"112"},{"size":398,"mtime":1627330319620,"results":"142","hashOfConfig":"112"},{"size":908,"mtime":1627409765102,"results":"143","hashOfConfig":"112"},{"size":350,"mtime":1626969849280,"results":"144","hashOfConfig":"112"},{"size":1787,"mtime":1627915990550,"results":"145","hashOfConfig":"112"},{"size":3065,"mtime":1627689930704,"results":"146","hashOfConfig":"112"},{"size":1552,"mtime":1626984257266,"results":"147","hashOfConfig":"112"},{"size":3079,"mtime":1627507763673,"results":"148","hashOfConfig":"112"},{"size":2202,"mtime":1627917570978,"results":"149","hashOfConfig":"112"},{"size":153,"mtime":1627046574087,"results":"150","hashOfConfig":"112"},{"size":449,"mtime":1627690098215,"results":"151","hashOfConfig":"112"},{"size":419,"mtime":1627689761303,"results":"152","hashOfConfig":"112"},{"size":3125,"mtime":1627919113944,"results":"153","hashOfConfig":"112"},{"size":3383,"mtime":1627915856168,"results":"154","hashOfConfig":"112"},{"size":327,"mtime":1627570545008,"results":"155","hashOfConfig":"112"},{"size":1726,"mtime":1627910686089,"results":"156","hashOfConfig":"112"},{"size":1897,"mtime":1627910315975,"results":"157","hashOfConfig":"112"},{"size":5638,"mtime":1627685272937,"results":"158","hashOfConfig":"112"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},"1ymnm69",{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"161"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"161"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"161"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"161"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"161"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"161"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"161"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"161"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"161"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"161"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"230","messages":"231","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},"1b0e11m",{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"234"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"264","messages":"265","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"234"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"234"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"334"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340","usedDeprecatedRules":"234"},"/Users/manuel/Desktop/inscribe-app/src/index.js",[],["341","342"],"/Users/manuel/Desktop/inscribe-app/src/App.js",[],"/Users/manuel/Desktop/inscribe-app/src/reportWebVitals.js",[],"/Users/manuel/Desktop/inscribe-app/src/pages/Dashboard.js",[],"/Users/manuel/Desktop/inscribe-app/src/store/GlobalState.jsx",[],"/Users/manuel/Desktop/inscribe-app/src/pages/ArticleEditor.js",["343","344","345"],"import React, { useContext, useEffect, useState } from 'react'\nimport ArticleToolbar from '../components/topbar/ArticleToolbar'\nimport { ReactSVG } from \"react-svg\";\nimport './ArticleEditor.css';\nimport SideLeftIcon from './../assets/icons/side-left.svg';\nimport SideRightIcon from './../assets/icons/side-right.svg';\nimport ContentEditable from \"react-contenteditable\";\nimport InsMenu from '../components/InsMenu';\nimport InscribeIcon from './../assets/icons/inscribe.svg';\nimport PageFlowIcon from './../assets/icons/pageflow.svg';\nimport { GlobalContext } from '../store/GlobalState';\nimport DesignToolbar from '../components/topbar/DesignToolbar';\nimport SideBarLeft from '../components/SideBarLeft';\nimport SideBarRight from '../components/SideBarRight';\nimport localforage from 'localforage';\nimport BlockEditor from '../components/BlockEditor';\nimport {\n    DragDropContext,\n    Droppable,\n    Draggable\n} from \"react-beautiful-dnd\";\nimport InsModal from '../components/InsModal';\n\nfunction ArticleEditor() {\n\n    const { workspace, changeWorkspace, breakpoint, toggleLeftSidebar, toggleRightSidebar, loadPresentation, presentation, isLeftSidebarOpen, isRightSidebarOpen, addToPresentation } = useContext(GlobalContext);\n\n    useEffect(() => {\n        localforage.config({\n            driver: localforage.LOCALSTORAGE,\n            name: 'inscribe',\n            version: 1.0,\n        });\n        loadPresentation();\n\n        // shortcuts keys\n        shortcurtMethods();\n\n    }, []);\n\n    const shortcurtMethods = () => {\n        document.onkeyup = function (e) {\n            var evt = window.event || e;\n            console.log(evt)\n            switch (evt.keyCode) {\n                // delete\n                case 220:  \n                    // Call your method Here\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n\n    const onDragEnd = async (result) => {\n        try {\n            const { source, destination, draggableId } = result;\n            if (!destination) {\n                return;\n            }\n            const destId = destination.droppableId;\n            const srcId = source.droppableId;\n            console.log(result)\n            if (destId) {\n                if (srcId === `droppable-assets`) {\n                    filterAsset(draggableId, destination.index)\n                }\n            }\n\n        } catch (error) { console.log(error) }\n    };\n\n  \n\n\n    const filterAsset = async (id, index) => {\n        try {\n            let _presentation = await localforage.getItem('presentation');\n            if (_presentation) {\n                let assetItems = _presentation.assets.filter(item => item.id === id);\n                \n                if (assetItems.length > 0) {\n                    let presentationItems = _presentation.items;\n                    \n                    let items = assetItems[0].items;\n                    if (assetItems[0].items && assetItems[0].items.length > 0) {\n                        addToPresentation([\n                            ...presentationItems,\n                            ...items\n                        ])\n                    } else {\n                        if (presentationItems.length > 0) {\n                            \n                            presentationItems.splice(index, 0, assetItems[0])\n                            addToPresentation(presentationItems)\n                        } else {\n                            addToPresentation([assetItems[0]])\n                        }\n                        \n                        \n                    }\n                } \n            }\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n\n    const items = [\n        {\n            id: 0,\n            icon: <img className=\"mr-3\" width=\"20\" src={InscribeIcon} alt=\"\" />,\n            text: 'Writing',\n            disabled: false,\n            action: () => changeWorkspace(\"article\"),\n            description: 'Includes article writing and editing tools'\n        },\n        {\n            id: 1,\n            icon: <img className=\"mr-3\" width=\"20\" src={PageFlowIcon} alt=\"\" />,\n            text: 'Design',\n            action: () => changeWorkspace(\"presentation\"),\n            disabled: false,\n            description: 'Digital content layout and presentation tools.'\n        },\n    ]\n\n    const setBreakPointWidth = () => {\n        switch (breakpoint) {\n            case \"desktop\":\n                return \"100%\";\n            case \"tablet-portrait\":\n                return 767;\n            case \"tablet-landscape\":\n                return 1024;\n            case \"phone\":\n                return 425;\n            default:\n                return \"100%\";\n        }\n    }\n\n\n\n    return (\n        <>\n        <DragDropContext onDragEnd={onDragEnd}>\n            <div className=\"editor\">\n                <div className=\"flex fixed w-full border-b border-gray-100 px-4 flex-row justify-between py-2 z-50 bg-gray-50 \">\n                    <button className={`p-2 rounded bg-gray-900 ${isLeftSidebarOpen ? 'bg-opacity-5' : 'bg-opacity-0'}  hover:bg-opacity-5`} onClick={() => toggleLeftSidebar(isLeftSidebarOpen)}>\n                        <ReactSVG src={SideLeftIcon} />\n                    </button>\n                    {\n                        workspace === 'presentation' ? <DesignToolbar /> : <ArticleToolbar />\n                    }\n                    <div className=\"flex items-center\">\n                        <InsMenu items={items} title=\"Workspace\">\n                            <div className=\"hasDropdown p-2 rounded cursor-pointer bg-gray-900 bg-opacity-0 hover:bg-opacity-5\">\n                                <img style={{ float: 'left' }} src={workspace === \"presentation\" ? PageFlowIcon : InscribeIcon} alt=\"\" />\n                            </div>\n                        </InsMenu>\n                        <button className=\"p-2 rounded bg-gray-900 bg-opacity-0 hover:bg-opacity-5\">\n                            <ReactSVG\n                                src=\"/images/add.svg\"\n                            />\n                        </button>\n                        <button className={`p-2 mr-2 rounded bg-gray-900 ${isRightSidebarOpen ? 'bg-opacity-5' : 'bg-opacity-0'}  hover:bg-opacity-5`} onClick={() => toggleRightSidebar(isRightSidebarOpen)}>\n                            <ReactSVG src={SideRightIcon} />\n                        </button>\n                    </div>\n                </div>\n\n                <div className=\"flex justify-between bg-gray-200 overflow-hidden\">\n\n                    {isLeftSidebarOpen ? <SideBarLeft /> : null}\n\n                    <div className={`bg-white flex-1 mx-auto ${breakpoint !== 'desktop' ? 'border-l-4 border-r-4 border-gray-200' : ''}`} style={{ maxWidth: setBreakPointWidth() }}>\n\n                        <div className=\"container px-4 h-screen overflow-auto mx-auto pb-24\" style={{ paddingTop: workspace === 'presentation' ? 60 : 100, maxWidth: isLeftSidebarOpen || isRightSidebarOpen ? 600 : 1024 }} >\n                            <Droppable\n                                key={0}\n                                ignoreContainerClipping={true}\n\n                                droppableId={`droppable-document`}\n                                isDropDisabled={false}\n                            >\n                                {(provided, snapshot) => (\n\n                                    <div\n                                        className={`${snapshot.isDraggingOver ? 'bg-indigo-50 rounded-sm' : ''}`}\n                                        style={{ minHeight: presentation && presentation.items.length > 0 ? 'auto' : 800 }}\n                                        ref={provided.innerRef}\n                                    >\n                                        {\n                                            presentation && presentation.items.map((item, index) => {\n                                                return <Draggable\n                                                    key={index}\n                                                    \n                                                    draggableId={`${item.id}`}\n                                                    index={index}>\n                                                    {(provided, snapshot) => (\n                                                        <div\n                                                            ref={provided.innerRef}\n                                                            {...provided.draggableProps}\n                                                            {...provided.dragHandleProps}\n                                                        >\n                                                            <BlockEditor snapshot={snapshot} block={item} />\n                                                        </div>\n                                                    )}\n                                                </Draggable>\n                                            })\n                                        }\n\n                                        {provided.placeholder}\n                                    </div>\n                                )}\n                            </Droppable>\n\n                        </div>\n\n                    </div>\n\n                    {\n                        isRightSidebarOpen ?\n                            <SideBarRight content={<h1>TEST</h1>} /> :\n                            null\n                    }\n\n                </div>\n\n\n            </div>\n        </DragDropContext>\n        <InsModal />\n        </>\n    )\n}\nexport default ArticleEditor\n","/Users/manuel/Desktop/inscribe-app/src/pages/Extensions.js",["346","347"],"import React from \"react\";\nimport DropZoneFile from \"./../components/DropZoneFile\";\nimport extensions from \"./../assets/json/extensions.json\";\nimport ExtensionCard from \"../components/ExtensionCard\";\n\nfunction Extensions() {\n  return (\n    <div className=\"px-5 pb-5 pt-10 flex flex-wrap content-start\">\n      <div className=\"lg:w-1/2 px-4\">\n        <h2 className=\"font-bold text-xl mb-1\">Extensions</h2>\n        <input\n          className=\"px-2 mb-4 w-full rounded py-2 border border-gray-300 appearance-none focus:outline-none focus:border-indigo-800\"\n          type=\"text\"\n          placeholder=\"Search Extensions\"\n        />\n        <DropZoneFile name=\"extension folder\" />\n        <h2 className=\"font-bold text-xl my-3 py-2 border-b\">Installed</h2>\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          {extensions &&\n            extensions.map((extension) => {\n              if (extension.isInstalled)\n                return (\n                  <ExtensionCard\n                    name={extension.name}\n                    icon={extension.icon}\n                    description={extension.description}\n                    isInstalled={extension.isInstalled}\n                    hasUpdate={extension.hasUpdate}\n                    size={extension.size}\n                  />\n                );\n            })}\n        </div>\n      </div>\n      <div className=\"lg:w-1/2 sm:mt-4 px-4\">\n        <h2 className=\"font-bold text-xl mb-3 pb-2 border-b\">Available</h2>\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          {extensions &&\n            extensions.map((extension) => {\n              if (!extension.isInstalled)\n                return (\n                  <ExtensionCard\n                    name={extension.name}\n                    icon={extension.icon}\n                    key={extension.id}\n                    description={extension.description}\n                    isInstalled={extension.isInstalled}\n                    hasUpdate={extension.hasUpdate}\n                    size={extension.size}\n                  />\n                );\n            })}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Extensions;\n","/Users/manuel/Desktop/inscribe-app/src/pages/Home.js",["348"],"import React from 'react'\nimport DropZoneFile from '../components/DropZoneFile'\nimport RecentContainer from '../components/RecentContainer'\nimport TemplatesBar from '../components/sidebar/TemplatesBar'\n\nfunction Home() {\n    return (\n        <div className=\"flex flex-row\">\n            {/* <TemplatesBar /> */}\n            <div className=\"p-5 flex-grow pt-10\">\n            <DropZoneFile name=\"file\" />\n            <RecentContainer />\n            </div>\n        </div>\n    )\n}\n\nexport default Home\n","/Users/manuel/Desktop/inscribe-app/src/components/topbar/DashboardBar.js",["349"],"import React from 'react'\nimport {\n    Link,\n    NavLink\n  } from \"react-router-dom\";\nimport InsMenu from '../InsMenu';\nimport InscribeIcon from './../../assets/icons/inscribe.svg';\nimport PageFlowIcon from './../../assets/icons/pageflow.svg';\nimport { useHistory } from \"react-router-dom\";\n\nfunction DashboardBar() {\n\n  let history = useHistory();\n\n\n  const items = [\n    {\n      id: 0, \n      icon: <img className=\"mr-3\" width=\"20\" src={InscribeIcon} alt=\"\" />,\n      text: 'Article',\n      disabled: true,\n      description: 'Includes article writing and editing tools'\n    },\n    {\n      id: 1, \n      icon: <img className=\"mr-3\" width=\"20\" src={PageFlowIcon} alt=\"\" />,\n      text: 'Presentation',\n      action: () => history.push(\"/editor/presentation/\"), \n      disabled: false,\n      description: 'Digital content layout and presentation tools.'\n    },\n  ]\n    return (\n        <div className=\"flex px-4 border-b border-gray-100 justify-between fixed w-full\" style={{backgroundColor: '#F8F8F8' }}>\n          <div className=\"flex flex-row\">\n            <InsMenu items={items} title=\"Project\">\n              <div className=\"py-4 px-4 text-gray-500 hasDropdown cursor-pointer\">New</div>\n            </InsMenu>\n\n              <a className=\"py-4 px-4 text-gray-500\" href=\"/\">Open...</a>\n              <NavLink to=\"/home\" activeClassName=\"border-b-4 border-indigo-500 text-indigo-500\" className=\"px-4 py-4 text-gray-500\">Home</NavLink>\n              {/* <NavLink to=\"/extensions\" activeClassName=\"border-b-4 border-indigo-500  text-indigo-500\" className=\"px-4 py-4 text-gray-500\">Extensions</NavLink> */}\n\n          </div>\n      {/* <UserInfo /> */}\n    </div>\n    )\n}\n\nexport default DashboardBar\n","/Users/manuel/Desktop/inscribe-app/src/store/AppReducer.js",[],"/Users/manuel/Desktop/inscribe-app/src/store/ActionTypes.js",[],"/Users/manuel/Desktop/inscribe-app/src/components/topbar/ArticleToolbar.js",[],"/Users/manuel/Desktop/inscribe-app/src/components/InsMenu.js",[],"/Users/manuel/Desktop/inscribe-app/src/components/topbar/DesignToolbar.js",[],"/Users/manuel/Desktop/inscribe-app/src/components/SideBarRight.js",[],"/Users/manuel/Desktop/inscribe-app/src/components/BlockEditor.js",["350","351"],"import React, { useState } from 'react'\nimport ContentEditable from 'react-contenteditable'\nimport PlusIcon from './../assets/icons/plus.svg';\nimport { ReactSVG } from 'react-svg';\n\nexport default function BlockEditor(props) {\n\n    const [isFocused, setIsFocused] = useState(false);\n\n    const blockType = () => {\n        switch (props.block.type) {\n            case 'text':\n                return <ContentEditable\n                    tagName=\"div\"\n                    className={props.block.classlist.toString().replace(',', ' ')}\n                    draggable={false}\n                    html={props.block.data}\n                    disabled={false}\n                    onChange={(e) => console.log(e)}\n                    onBlur={() => { }}\n                />\n            case 'image':\n                return <img contentEditable={true} className={props.block.classlist.toString().replace(',', ' ')} alt={props.block.name} src={props.block.blob} />\n            case 'container':\n                return <div className={props.block.classlist.toString().replace(',', ' ')}>{\n                    props.block.children.map((item, i) => {\n                        if (item.type === 'text') {\n                            return <ContentEditable\n                                tagName=\"span\"\n                                key={i}\n                                className={item.classlist.toString().replace(',', ' ')}\n                                draggable={false}\n                                html={item.data}\n                                disabled={false}\n                                onChange={(e) => console.log(e)}\n                                onBlur={() => { }}\n                            />\n                        }\n                        if (item.type === 'link') {\n                            return <a className={item.classlist.toString().replace(',', ' ')}>{item.data}</a>\n                        }\n                    })\n                }\n                </div>\n            default:\n                break;\n        }\n    }\n\n    return (\n        <div className=\"cursor-default\" onBlur={() => setIsFocused(false)} onFocus={(e) => setIsFocused(true)}>\n            {\n                props.block.classlist.length > 0 && isFocused ?\n                    <div className=\"py-1 px-2 bg-indigo-600 cursor-move rounded-sm inline-flex\">\n                        {\n                            props.block.classlist.map((c, i) => {\n                                return <span key={i} className=\"text-white text-xs\">.{c}</span>\n                            })\n                        }\n\n                    </div> : null\n            }\n            <div className={`border-indigo-500 bg-white rounded-sm relative w-full ${isFocused ? 'border-2' : 'border-0'} ${props.snapshot.isDragging ? 'shadow-lg' : ''}`}>\n\n                {blockType()}\n\n                {\n                    isFocused ?\n                        <button className=\"absolute -right-3 top-1/2 p-1 transform -translate-y-1/2 bg-indigo-600 rounded-full\">\n                            <ReactSVG src={PlusIcon}\n                                beforeInjection={(svg) => {\n                                    svg.setAttribute('style', 'stroke: white; width: 18px; height: 18px;')\n                                }}\n                            />\n                        </button> : null\n                }\n\n            </div>\n        </div>\n    )\n}\n","/Users/manuel/Desktop/inscribe-app/src/components/ExtensionCard.js",["352"],"import React, { useState } from \"react\";\nimport { ReactSVG } from \"react-svg\";\nimport DownloadIcon from \"../assets/icons/DownloadIcon\";\nimport TrashIcon from \"../assets/icons/TrashIcon\";\nimport UpdateIcon from \"../assets/icons/UpdateIcon\";\n\nfunction ExtensionCard(props) {\n\n\n  return (\n    <div key={props.id} className=\"flex flex-row p-4 justify-between content-center rounded-lg bg-gray-900 bg-opacity-5 hover:bg-opacity-10\">\n      <div className=\"flex content-center w-9/12\">\n        <div className=\"self-center mr-4\">\n          <ReactSVG\n            beforeInjection={(svg) => {\n              svg.setAttribute(\"style\", \"width: 40px\");\n            }}\n            src={`images/${props.icon}.svg`}\n          />\n        </div>\n        <p className=\"text-lg self-center font-semibold text-gray-600 leading-5\">\n          {props.name} <br />\n          <span className=\"text-sm font-normal text-gray-400\">\n            {props.description}\n          </span>\n        </p>\n      </div>\n      <div className=\"flex flex-wrap flex-col justify-center content-center\">\n        <div className=\"self-center\">\n          {props.isInstalled ? (\n            props.hasUpdate ? (\n              <UpdateIcon />\n            ) : (\n              <TrashIcon />\n            )\n          ) : (\n            <DownloadIcon />\n          )}\n        </div>\n        <span className=\"text-gray-600 mt-2 text-sm\">\n          {props.isInstalled\n            ? props.hasUpdate\n              ? \"Update\"\n              : \"Remove\"\n            : props.size}\n        </span>\n      </div>\n    </div>\n  );\n}\n\nexport default ExtensionCard;\n","/Users/manuel/Desktop/inscribe-app/src/components/SideBarLeft.js",["353"],"\nimport React, { useContext, useState } from 'react'\nimport { GlobalContext } from '../store/GlobalState';\nimport Collaspible from './Collaspible';\nimport DropZoneFile from './DropZoneFile';\nimport RecentFile from './RecentFile';\nimport {\n    Droppable,\n    Draggable\n} from \"react-beautiful-dnd\";\nimport OutlineCollapsible from './OutlineCollapsible';\n\nexport default function SideBarLeft() {\n   \n    const { presentation } = useContext(GlobalContext);\n\n    return (\n            <div className=\"fixed h-full overflow-scroll z-10 bg-gray-50 border-r border-gray-100\" \n            style={{ width: 350, paddingTop: 60 }}>\n               \n                <Collaspible title=\"Assets\" >\n\n                    <DropZoneFile  />\n                    <div className=\"py-1\"> \n\n                    <Droppable key={0} droppableId={`droppable-assets`} isDropDisabled={true}>\n                            {(provided, snapshot) => (\n                                <div className=\"\" ref={provided.innerRef}>\n                                    {\n                                        presentation && presentation.assets.map((asset, index) => {\n\n                                            return <Draggable key={index} draggableId={`${asset.id}`} index={index}>\n                                            {(provided, snapshot) => (\n                                            \n                                            <div className={`${snapshot.isDragging ? 'shadow-lg rounded bg-gray-50' : ''}`} ref={provided.innerRef}\n                                             {...provided.draggableProps}\n                                             {...provided.dragHandleProps}><RecentFile type={asset.extension} name={asset.name} date={asset.date} /></div>\n                                            )}</Draggable>\n                                        })\n                                    }\n                                     {provided.placeholder}\n                               </div>             \n                                            \n                            )} \n                        \n                    </Droppable>\n                    </div>\n                </Collaspible>\n                <Collaspible title=\"Outline\" >\n                    {\n                        presentation && presentation.items.length > 0 && presentation.items.map((a, index) => {\n                            return <OutlineCollapsible key={index} item={a} >\n                                {\n                                    a.children && a.children.length > 0 && a.children.map((b, i) => {\n                                       return <OutlineCollapsible \n                                       item={b}\n                                       key={i}>\n                                           {\n                                               b.children && b.children.length > 0 && b.children.map((c, x) => {\n                                                return <OutlineCollapsible \n                                                item={c}\n                                                key={x}></OutlineCollapsible>\n                                               })\n                                           }\n                                       </OutlineCollapsible>\n                                    })\n                                }\n                            </OutlineCollapsible>\n                        })\n                    }\n                </Collaspible> \n            </div>\n        \n    )\n}\n","/Users/manuel/Desktop/inscribe-app/src/components/DropZoneFile.js",["354","355","356","357"],"import React, { useEffect } from \"react\";\nimport { useContext } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { GlobalContext } from \"../store/GlobalState\";\nimport DragDropIcon from \"./../assets/icons/drag.svg\";\n// import article from \"./../assets/articles/Article.xml\"\n// const XMLParser = require('react-xml-parser');\n// const axios = require('axios');\n\nimport { v4 } from 'uuid';\nfunction DropZoneFile(props) {\n\n  const { addAsset } = useContext(GlobalContext);\n\n  const {\n    getRootProps,\n    getInputProps,\n    acceptedFiles,\n    isDragActive,\n    isDragAccept,\n    isDragReject,\n  } = useDropzone();\n\n  \n\n  useEffect(() => {\n\n    acceptedFiles.map(file => {\n    \n      if (file.type === 'image/jpeg') {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onloadend = () => {\n          let asset = {\n            id: v4(),\n            date: new Date().toLocaleString(),\n            extension: 'JPEG',\n            classlist:[],\n            description: 'image',\n            type: 'image',\n            size: `${file.size}KB`,\n            data: file.name,\n            name: file.name,\n            blob: reader.result\n          }\n          addAsset(asset)\n         // console.log(reader.result)\n        }\n      }\n        \n        // file.arrayBuffer().then(data => {\n          \n        //   let asset = {\n        //     id: uuid(),\n        //     date: new Date().toLocaleString(),\n        //     extension: 'JPEG',\n        //     classlist:[],\n        //     type: 'image',\n        //     size: `${file.size}KB`,\n        //     data: file.name,\n        //     name: file.name,\n        //     blob: data\n        //   }\n        //   console.log(asset)\n        //   addAsset(asset)\n        // })\n\n\n      if (file.type === 'application/json') {\n        file.text().then(article => {\n          let file = JSON.parse(article);\n            if (file && file.extension === 'MEPSA') {\n              addAsset(file)\n            }\n        })\n      }\n    });\n  }, [acceptedFiles])\n\n  return (\n    <div className=\"flex justify-center content-center\">\n      <div\n        {...getRootProps({\n          onDrop: event => {\n            console.log(acceptedFiles)\n            \n          },\n          className: `${\n            isDragActive\n              ? \"bg-indigo-700 border-indigo-200\"\n              : \"bg-gray-900 border-gray-100\"\n          } bg-gray-100 p-3 flex-grow rounded-lg flex justify-center border-dotted border-4 focus:outline-none focus:border-4 focus:border-indigo-700 flex-col bg-opacity-5`,\n        })}\n      >\n        <input  {...getInputProps({className: \"min-w-full\" })} />\n        <div className=\"flex justify-center flex-wrap self-center\">\n            <img src={DragDropIcon} width=\"32\" className=\"my-4 opacity-50\" alt=\"\" />\n        </div>\n        <div className=\"mx-auto flex justify-center flex-wrap self-center\">\n          <p\n            className={`${\n              isDragActive ? \"text-indigo-300\" : \"text-gray-300\"\n            } self-center text-gray-300  text-center`}\n          >\n            Drag and drop file here.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default DropZoneFile;\n","/Users/manuel/Desktop/inscribe-app/src/components/RecentContainer.js",[],"/Users/manuel/Desktop/inscribe-app/src/components/sidebar/TemplatesBar.js",[],"/Users/manuel/Desktop/inscribe-app/src/assets/icons/DownloadIcon.js",[],"/Users/manuel/Desktop/inscribe-app/src/assets/icons/UpdateIcon.js",[],"/Users/manuel/Desktop/inscribe-app/src/components/RecentFile.js",["358","359"],"import React from 'react'\nimport mepsaIcon from './../assets/icons/mepsa.svg';\nimport moreIcon from './../assets/icons/more.svg';\nimport ImageIcon from './../assets/icons/image.svg';\nimport TextTruncate from 'react-text-truncate';\n\nfunction RecentFile(props) {\n    return (\n        <div className=\"flex justify-between items-center p-2 border-b border-gray-50 hover:bg-gray-100 rounded hover:bg-opacity-30 cursor-pointer my-1\">\n            <div className=\"flex content-center\">\n                <img src={props.type === 'MEPSA' ? mepsaIcon : ImageIcon} width=\"18\" className=\"mr-2\" alt=\"\"/>\n                <p className=\"leading-3\">\n                     <span className=\"font-normal text-sm text-gray-600\">{props.name}</span>\n                   <br />\n                    <span className=\"font-normal text-xs text-gray-400\">{props.type}</span>\n                </p>\n               \n            </div>\n\n            {/* <div className=\"flex content-center\">\n                <img src={moreIcon} width=\"24\" className=\"mr-2\" alt=\"\" />\n            </div> */}\n        </div>\n    )\n}\n\nexport default RecentFile\n","/Users/manuel/Desktop/inscribe-app/src/components/Collaspible.js",[],"/Users/manuel/Desktop/inscribe-app/src/assets/icons/TrashIcon.js",[],"/Users/manuel/Desktop/inscribe-app/src/components/buttons/EditButton.js",["360"],"import React from 'react'\nimport { ReactSVG } from \"react-svg\";\n\nfunction EditButton(props) {\n    return (\n        <button\n            className=\"p-2 ql-bold mx-1 rounded bg-gray-900 bg-opacity-0 hover:bg-opacity-5\"\n          key={props.cmd}\n          onMouseDown={evt => {\n            evt.preventDefault();\n            document.execCommand(props.cmd, false, props.arg); // Send the command to the browser\n          }}\n        >\n          <img src={props.icon} alt=\"icon\" />\n        </button>\n      );\n}\n\nexport default EditButton\n","/Users/manuel/Desktop/inscribe-app/src/components/FileTemplate.js",[],"/Users/manuel/Desktop/inscribe-app/src/components/OutlineCollapsible.js",[],"/Users/manuel/Desktop/inscribe-app/src/components/InsModal.js",[],"/Users/manuel/Desktop/inscribe-app/src/components/ImageCropper.js",["361","362","363"],"/Users/mdefreitas/Desktop/inscribe-app/src/index.js",[],["364","365"],"/Users/mdefreitas/Desktop/inscribe-app/src/reportWebVitals.js",[],"/Users/mdefreitas/Desktop/inscribe-app/src/App.js",[],"/Users/mdefreitas/Desktop/inscribe-app/src/pages/Dashboard.js",[],"/Users/mdefreitas/Desktop/inscribe-app/src/pages/Extensions.js",[],"/Users/mdefreitas/Desktop/inscribe-app/src/pages/ArticleEditor.js",["366"],"import React, { useContext, useEffect } from 'react'\nimport { GlobalContext } from '../store/GlobalState';\n\nimport SideBarLeft from '../components/SideBarLeft';\nimport SideBarRight from '../components/SideBarRight';\nimport localforage from 'localforage';\nimport { DndProvider } from 'react-dnd'\nimport InsModal from '../components/InsModal';\nimport TopBar from '../components/topbar/TopBar';\nimport PresentationEditor from '../components/PresentationEditor';\nimport PrototypeNav from '../components/topbar/PrototypeNav';\nimport { HTML5Backend } from 'react-dnd-html5-backend'\nfunction ArticleEditor() {\n\n    const { isLeftSidebarOpen, isRightSidebarOpen, isModalOpen, removeItem, selectedItem } = useContext(GlobalContext);\n   \n\n    useEffect(() => {\n        localforage.config({\n            driver: localforage.LOCALSTORAGE,\n            name: 'inscribe',\n            version: 1.0,\n        });\n       \n        // shortcuts keys\n        shortcurtMethods();\n\n    },[]);\n\n    const shortcurtMethods = () => {\n        document.onkeyup = function (e) {\n            var evt = window.event || e;\n            console.log(evt)\n            switch (evt.keyCode) {\n                // delete\n                case 8:\n                    if (selectedItem) removeItem(selectedItem)\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n\n\n    return (\n        <>\n      \n        <DndProvider backend={HTML5Backend} debugMode={true}>\n            {/* <DragDropContext onDragEnd={onDragEnd}>  */}\n                <div className=\"editor\" >\n\n                    <TopBar />\n                    <div className=\"flex justify-between bg-gray-500 overflow-hidden\">\n                        {isLeftSidebarOpen ? <SideBarLeft /> : null}\n                        {isLeftSidebarOpen ? <div style={{ width: 350 }}></div> : null}\n                        <PresentationEditor />\n                        {isRightSidebarOpen ? <div style={{ width: 350 }}></div> : null}\n                        {isRightSidebarOpen ? <SideBarRight content={<h1>TEST</h1>} /> : null}\n\n                    </div>\n                </div>\n             {/* </DragDropContext>  */}\n            {\n                isModalOpen ? <InsModal /> : null\n            }\n             </DndProvider>\n           \n              <PrototypeNav />\n        </>\n    )\n}\nexport default ArticleEditor\n","/Users/mdefreitas/Desktop/inscribe-app/src/pages/Home.js",[],"/Users/mdefreitas/Desktop/inscribe-app/src/components/topbar/DashboardBar.js",[],"/Users/mdefreitas/Desktop/inscribe-app/src/store/GlobalState.jsx",["367"],"import React, { createContext, useReducer } from 'react';\nimport reducer from './AppReducer';\nimport localforage from 'localforage';\nimport useQuery from '../utils/useQuery';\nimport { v4 } from 'uuid';\nimport {\n    CHANGE_WORKSPACE,\n    OPEN_DROPDOWN,\n    CLOSE_DROPDOWN,\n    CHANGE_BREAKPOINT,\n    TOGGLE_LEFT_SIDEBAR,\n    TOGGLE_RIGHT_SIDEBAR,\n    LOAD_PRESENTATION,\n    ADD_ASSET,\n    ADD_TO_PRESENTATION,\n    SELECT_ITEM,\n    OPEN_MODAL,\n    CLOSE_MODAL,\n    TOGGLE_DRAGGING,\n    ON_DRAG,\n    ON_DROP,\n    SELECT_ASSET,\n    SELECT_COMPONENT\n} from './ActionTypes';\n\nconst components = [\n    {\n        id: v4(),\n        classlist: [\"columns\"],\n        data: \"images/columns.jpg\",\n        date: new Date().toDateString(),\n        name: \"Columns\",\n        description: 'Columns',\n        type: 'columns',\n        children: [\n            {\n                id: v4(),\n                index: 0,\n                name: \"Column One\",\n                description: \"Column One\",\n                classlist: [\"oneHalf\"],\n                type: 'column',\n                children: []\n            },\n            {\n                id: v4(),\n                index: 1,\n                name: \"Column Two\",\n                description: \"Column Two\",\n                classlist: [\"oneHalf\"],\n                type: 'column',\n                children: []\n            }\n        ]\n    },\n    {\n        id: v4(),\n        classlist: [\"backgroundContainer\"],\n        data: \"images/background.jpg\",\n        date: new Date().toDateString(),\n        name: \"Background\",\n        description: 'Background',\n        type: 'background',\n        children: [\n            {\n                id: v4(),\n                index: 0,\n                name: \"Background Image\",\n                description: \"Background Image\",\n                classlist: [\"backgroundItem\"],\n                data: null,\n                type: 'image'\n            },\n            {\n                id: v4(),\n                index: 1,\n                name: \"Foreground\",\n                description: \"Foreground items\",\n                classlist: [\"foreground\"],\n                type: 'container',\n                children: []\n            }\n        ]\n    },\n    {\n        id: v4(),\n        classlist: [\"boxContainer\"],\n        data: \"images/box.jpg\",\n        date: new Date().toDateString(),\n        name: \"Box\",\n        description: 'Box',\n        type: 'box',\n        title: null,\n        children: []\n    },\n    {\n        id: v4(),\n        classlist: [\"boxContainer\"],\n        data: \"images/box.jpg\",\n        date: new Date().toDateString(),\n        name: \"Box\",\n        description: 'Box',\n        type: 'box',\n        title: null,\n        children: []\n    }\n]\n \n\nconst initialState = {\n   workspace: 'presentation',\n   changeWorkspace: null,\n   presentation: null,\n   loadPresentation: null,\n   isDropdownOpen: null,\n   closeDropdown: null,\n   addAsset: null,\n   isLeftSidebarOpen: true,\n   isRightSidebarOpen: true,\n   toggleLeftSidebar: null,\n   toggleRightSidebar: null,\n   changeBreakpoint: null,\n   breakpoint: 'desktop',\n   openDropdown: null,\n   addToPresentation: null,\n   selectedItem: null,\n   selectItem: null,\n   modalChildren: null,\n   openModal: null,\n   closeModal: null,\n   setImageCrop: null,\n   setImageBlob: null,\n   isModalOpen: false,\n   removeItem: null,\n   removeClass: null,\n   addComponent: null,\n   toggleDragging: null,\n   components: components,\n   isDragging: false,\n   dragEvent: null,\n   dropEvent: null,\n   handleOnDrag: null,\n   handleOnDrop: null,\n   component: null,\n   asset: null,\n   selectAsset: null,\n   selectComponent: null\n}\n\n\n\nexport const GlobalContext = createContext(initialState)\n\nexport const GlobalProvider = (props) => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    let query = useQuery();\n\n    const changeWorkspace = (workspace) => {\n        dispatch({\n            type: CHANGE_WORKSPACE,\n            payload: {\n                isDropdownOpen: null,\n                workspace\n            }\n        })\n    }\n\n    const closeDropdown = () => {\n        dispatch({\n            type: CLOSE_DROPDOWN,\n            payload: null\n        })\n    }\n\n    const openDropdown = (event) => {\n        dispatch({\n            type: OPEN_DROPDOWN,\n            payload: event.currentTarget\n        })\n    }\n\n    const toggleLeftSidebar = () => {\n        dispatch({\n            type: TOGGLE_LEFT_SIDEBAR,\n            payload: !state.isLeftSidebarOpen\n        })\n    }\n\n    const toggleRightSidebar = () => {\n        dispatch({\n            type: TOGGLE_RIGHT_SIDEBAR,\n            payload: !state.isRightSidebarOpen\n        })\n    }\n\n    const changeBreakpoint = (breakpoint) => {\n        dispatch({\n            type: CHANGE_BREAKPOINT,\n            payload: breakpoint\n        })\n    }\n\n    const loadPresentation = async (presentation) => {\n        try {\n         \n            if (!presentation) {\n                const data = {\n                    id: \"2e38c05f-e466-4536-889b-12d62a8a63a4\",\n                    name: \"presentation\",\n                    extension: \"MEPSP\",\n                    size: \"329KB\",\n                    date: new Date().toLocaleString(),\n                    items: [],\n                    assets: [],\n                    toc: []\n                }\n                await localforage.setItem('presentation', data)\n                dispatch({\n                    type: LOAD_PRESENTATION,\n                    payload: data\n                })\n            } else {\n                await localforage.setItem('presentation', presentation)\n                dispatch({\n                    type: LOAD_PRESENTATION,\n                    payload: presentation\n                })\n            }\n\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    const toggleDragging = (boolean) => {\n        dispatch({\n            type: TOGGLE_DRAGGING,\n            payload: boolean\n        })\n    }\n\n    const handleOnDrag = (event) => {\n      \n        dispatch({\n            type: ON_DRAG,\n            payload: event\n        })\n    }\n\n    const handleOnDrop = (event) => {\n        console.log(event)\n        console.log(state.selectedItem)\n        dispatch({\n            type: ON_DROP,\n            payload: event\n        })\n    }\n\n    const addAsset = async (data) => {\n\n        let _presentation = await localforage.getItem('presentation');\n        if (_presentation) {\n            _presentation.assets.push(data)\n            if (data.extension === 'MEPSA') {\n                // TOC Concept\n                let filteredTOCArticles = _presentation.toc.filter(article => article.id === data.id);\n                if (filteredTOCArticles.length > 0) {\n                  return alert(\"Already exists\")\n                }\n\n\n\n                _presentation.toc.push(data)\n            }\n            await localforage.setItem('presentation', _presentation)\n        }\n        dispatch({\n            type: ADD_ASSET,\n            payload: _presentation\n        })\n    }\n\n    const removeClass = async (item, className) => {\n        let _presentation = await localforage.getItem('presentation');\n\n        if (_presentation && _presentation.items.length > 0 ) {\n\n            let itemIndex = _presentation.items.findIndex(el => el.id === item.id);\n            let newClassList = item.classlist.filter(c => c !== className);\n            item.classlist = newClassList;\n            _presentation.items[itemIndex] = item;\n            await localforage.setItem('presentation', _presentation);\n            dispatch({\n                type: LOAD_PRESENTATION,\n                payload: _presentation\n            })\n\n        } \n\n    }\n\n    // Array.prototype.swapItems = function(a, b){\n    //     this[a] = this.splice(b, 1, this[a])[0];\n    //     return this;\n    // }\n\n    // const swapElements = (array, indexA, indexB) => {\n    //     var temp = array[indexA];\n    //     array[indexA] = array[indexB];\n    //     array[indexB] = temp;\n    //     return array;\n    //   };\n\n      function array_move(arr, old_index, new_index) {\n        if (new_index >= arr.length) {\n            var k = new_index - arr.length + 1;\n            while (k--) {\n                arr.push(undefined);\n            }\n        }\n        arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);\n        return arr; // for testing\n    };\n\n\n    const addToPresentation = async (item, srcIndex, targetIndex) => {\n\n        let _presentation = await localforage.getItem('presentation');\n\n        if (_presentation) {\n            if (item.extension && item.extension === 'MEPSA') {\n\n                if (_presentation.items.filter(i => i.id === item.items[0].id).length > 0) {\n                  return alert('Already Exists')\n                } \n\n                if (_presentation.items.length > 0) {\n                    _presentation.items = [\n                        ..._presentation.items,\n                        ...item.items\n                    ]\n                } else {\n                    _presentation.items = [\n                        ...item.items\n                    ]\n                }\n                \n            } else {\n                    if (srcIndex !== null && targetIndex !== null) {\n                        array_move(_presentation.items, srcIndex, targetIndex)\n                    } else if (srcIndex !== null) {\n                        _presentation.items[srcIndex] = item\n                    } else {\n                        _presentation.items.push(item)\n                    }\n                }\n            \n              \n                await localforage.setItem('presentation', _presentation)\n                dispatch({\n                    type: ADD_TO_PRESENTATION,\n                    payload: _presentation\n                })\n\n        } \n    }\n\n    const addComponent = async (component) => {\n\n        let _presentation = await localforage.getItem('presentation');\n\n            if (_presentation) {\n\n                if (_presentation.items.length > 0 && state.selectedItem) {\n                    let selectedIndex = _presentation.items.findIndex(el => el.id === state.selectedItem.id);  \n                    // if (component.type === \"columns\") {\n                    //     component.children[0].children.push(state.selectedItem)\n                    // }\n                    _presentation.items.splice(selectedIndex + 1, 0, component)\n                } \n                    await localforage.setItem('presentation', _presentation)\n                    dispatch({\n                        type: LOAD_PRESENTATION,\n                        payload: _presentation\n                    })\n            }\n       \n    }\n\n\n    const removeItem = async (item, _presentation) => {\n        \n       // let _presentation = await localforage.getItem('presentation')\n        \n        if (_presentation && _presentation.items.length > 0) {\n           \n            if (item.type === 'columns') {\n               \n                let index = _presentation.items.findIndex(el => el.id === item.id);\n                if (item.children[0].children.length > 0 && item.children[0].children.length > 0) {\n                    _presentation.items.splice(index, 0, ...item.children[0].children, ...item.children[1].children)\n                } else if (item.children[0].children.length > 0) {\n                    _presentation.items.splice(index, 0, ...item.children[0].children)\n                } else if (item.children[1].children.length > 0) {\n                    _presentation.items.splice(index, 0, ...item.children[1].children)\n                }\n            }\n\n            _presentation.items = _presentation.items.filter(el => el.id !== item.id)\n            await localforage.setItem('presentation', _presentation)\n            dispatch({\n                type: LOAD_PRESENTATION,\n                payload: _presentation\n            })\n        }\n        \n    }\n\n    const openModal = (children) => {\n        dispatch({\n            type: OPEN_MODAL,\n            payload: {\n                isModalOpen: true,\n                modalChildren: children,\n            }\n        })\n    }\n\n    const closeModal = () => {\n        dispatch({\n            type: CLOSE_MODAL,\n            payload: {\n                isModalOpen: false,\n                modalChildren: null,\n            }\n        })\n    }\n\n\n    const setImageCrop = async (item, crop, cropId) => {\n        let _presentation = await localforage.getItem('presentation');\n        if (_presentation && _presentation.items.length > 0) {\n\n            let imageItems = _presentation.items.filter(_item => _item.id === item.id);\n            if (imageItems.length > 0) {\n                let imageItem = imageItems[0];\n                let crops = imageItem.crops.filter(c => c.id === cropId);\n                if (crops.length > 0) {\n                    let imageCrop = {\n                        ...crops[0],\n                        x: crop.x,\n                        y: crop.y\n                    }\n                    let imageCropIndex = imageItem.crops.findIndex(el => el.id === cropId);\n                    let itemIndex = _presentation.items.findIndex(el => el.id === item.id);\n\n                    imageItem.crops[imageCropIndex] = imageCrop;\n                    _presentation.items[itemIndex] = imageItem;\n                    await localforage.setItem('presentation', _presentation);\n\n                    dispatch({\n                        type: LOAD_PRESENTATION,\n                        payload: _presentation\n                    })\n\n                    dispatch({\n                        type: SELECT_ITEM,\n                        payload: imageItem\n                    })\n                }\n            }\n            \n        }\n    }\n\n    const setImageBlob = async (item, blob, cropId) => {\n        let _presentation = await localforage.getItem('presentation');\n    \n        if (_presentation && _presentation.items.length > 0) {\n            let imageItems = _presentation.items.filter(_item => _item.id === item.id);\n            if (imageItems.length > 0) {\n                let imageItem = imageItems[0];\n                let crops = imageItem.crops.filter(c => c.id === cropId);\n                if (crops.length > 0) {\n                    let imageCropIndex = imageItem.crops.findIndex(el => el.id === cropId);\n                    let itemIndex = _presentation.items.findIndex(el => el.id === item.id);\n                    imageItem.blob = blob;\n                    imageItem.crops[imageCropIndex] = {\n                        ...imageItem.crops[imageCropIndex],\n                        blob: blob\n                    }\n                    _presentation.items[itemIndex] = imageItem;\n                    await localforage.setItem('presentation', _presentation);\n\n                    dispatch({\n                        type: LOAD_PRESENTATION,\n                        payload: _presentation\n                    })\n\n                    dispatch({\n                        type: SELECT_ITEM,\n                        payload: imageItem\n                    })\n                }\n            }\n            \n        }\n    }\n\n    const selectItem = (item) => {\n        \n        if (item) {\n            dispatch({\n                type: SELECT_ITEM,\n                payload: item\n            })\n        }\n    }\n\n    const selectComponent = (component) => {\n        console.log(component)\n        if (component) {\n            dispatch({\n                type: SELECT_COMPONENT,\n                payload: component\n            })\n        }\n    }\n\n    const selectAsset = (asset) => {\n        console.log(asset)\n        if (asset) {\n            dispatch({\n                type: SELECT_ASSET,\n                payload: asset\n            })\n        }\n    }\n\n\n    return (\n        <GlobalContext.Provider value={{\n           workspace: state.workspace,\n           breakpoint: state.breakpoint,\n           presentation: state.presentation,\n           isDropdownOpen: state.isDropdownOpen,\n           isLeftSidebarOpen: state.isLeftSidebarOpen,\n           isRightSidebarOpen: state.isRightSidebarOpen,\n           loadPresentation,\n           setImageCrop,\n           addAsset,\n           openDropdown,\n           changeBreakpoint,\n           closeDropdown,\n           toggleRightSidebar,\n           toggleLeftSidebar,\n           changeWorkspace,\n           openModal,\n           setImageBlob,\n           addToPresentation,\n           isModalOpen: state.isModalOpen,\n           selectItem,\n           closeModal,\n           removeItem,\n           modalChildren: state.modalChildren,\n           selectedItem: state.selectedItem,\n           removeClass,\n           addComponent,\n           toggleDragging,\n           components: state.components,\n           isDragging: state.isDragging,\n           handleOnDrop,\n           handleOnDrag,\n           dragEvent: state.dragEvent,\n           dropEvent: state.dropEvent,\n           selectComponent,\n           selectAsset,\n           component: state.component,\n           asset: state.asset\n        }}>\n            {props.children}\n        </GlobalContext.Provider>\n    )\n}\n","/Users/mdefreitas/Desktop/inscribe-app/src/components/DropZoneFile.js",["368"],"import React, { useEffect } from \"react\";\nimport { useContext } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { GlobalContext } from \"../store/GlobalState\";\nimport DragDropIcon from \"./../assets/icons/drag.svg\";\n\nimport { v4 } from 'uuid';\nimport { useHistory, useLocation } from \"react-router-dom\";\nfunction DropZoneFile(props) {\n\n  const { addAsset, toggleLeftSidebar } = useContext(GlobalContext);\n  const location = useLocation();\n  const history = useHistory();\n  const {\n    getRootProps,\n    getInputProps,\n    acceptedFiles,\n    isDragActive,\n  } = useDropzone();\n\n  \n\n  useEffect(() => {\n\n    acceptedFiles.map(file => {\n    \n      if (file.type === 'image/jpeg') {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onloadend = () => {\n          let asset = {\n            id: v4(),\n            date: new Date().toLocaleString(),\n            extension: 'JPEG',\n            classlist:[],\n            description: 'image',\n            type: 'image',\n            size: `${file.size}KB`,\n            text: file.name,\n            name: file.name,\n            raw: reader.result,\n            blob: reader.result,\n            crops: [\n              {\n                blob: null,\n                id: v4(),\n                name: 'SQR',\n                height: 224,\n                width: 224,\n                unit: \"px\",\n                x: 0,\n                y: 0\n              },\n              {\n                blob: null,\n                id: v4(),\n                name: 'PNR',\n                height: 267,\n                width: 801,\n                unit: \"px\",\n                x: 0,\n                y: 0\n              },\n              {\n                id: v4(),\n                blob: null,\n                name: 'LSR',\n                height: 400,\n                width: 800,\n                unit: \"px\",\n                x: 0,\n                y: 0\n              },\n            ]\n          }\n          addAsset(asset)\n         // console.log(reader.result)\n        }\n      }\n\n\n      if (file.type === 'application/json') {\n        file.text().then(article => {\n          let file = JSON.parse(article);\n            if (file && file.extension === 'MEPSA') {\n              \n              if (location.pathname === '/home') {\n                history.push('/editor')\n                setTimeout(() => {\n                  addAsset(file)\n                  toggleLeftSidebar(true)\n                }, 1000)\n\n              } else {\n                addAsset(file)\n              }\n            }\n        })\n      }\n      return null\n    });\n  }, [acceptedFiles])\n\n  return (\n    <div className=\"flex justify-center content-center mb-4\" {...props}>\n      <div\n        {...getRootProps({\n          onDrop: event => {\n            console.log(acceptedFiles)\n            \n          },\n          className: `${\n            isDragActive\n              ? \"bg-indigo-700 border-indigo-200\"\n              : \"bg-gray-900 border-gray-100\"\n          } bg-gray-100 p-3 flex-grow rounded flex justify-center border-dashed border-2 focus:outline-none focus:border-4 focus:border-indigo-700 flex-col bg-opacity-5`,\n        })}\n      >\n        <input  {...getInputProps({className: \"min-w-full\" })} />\n        <div className=\"flex justify-center flex-wrap self-center\">\n            <img src={DragDropIcon} width=\"32\" className=\"my-4 opacity-30\" alt=\"\" />\n        </div>\n        <div className=\"mx-auto flex justify-center flex-wrap self-center\">\n          <p\n            className={`${\n              isDragActive ? \"text-indigo-300\" : \"text-gray-300\"\n            } self-center text-gray-300  text-center`}\n          >\n            Drag and drop file here. <br />\n            <button className=\"px-2 py-1 text-gray-400 rounded border mt-2 border-gray-100 mr-1 text-sm hover:bg-gray-100\">Upload</button>\n          </p>\n          \n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default DropZoneFile;\n","/Users/mdefreitas/Desktop/inscribe-app/src/components/topbar/DesignToolbar.js",[],"/Users/mdefreitas/Desktop/inscribe-app/src/components/topbar/ArticleToolbar.js",[],"/Users/mdefreitas/Desktop/inscribe-app/src/components/InsMenu.js",[],"/Users/mdefreitas/Desktop/inscribe-app/src/components/SideBarLeft.js",[],"/Users/mdefreitas/Desktop/inscribe-app/src/components/BlockEditor.js",["369"],"import React, { useContext } from 'react'\n// import ContentEditable from 'react-contenteditable'\nimport PlusIcon from './../assets/icons/plus-white.svg';\nimport CloseIcon from './../assets/icons/close-white.svg';\nimport { ReactSVG } from 'react-svg';\nimport CropIcon from './../assets/icons/crop.svg';\nimport TrashIcon from './../assets/icons/trash-white.svg';\nimport { GlobalContext } from '../store/GlobalState';\nimport ImageCropper from './ImageCropper';\nimport AddView from './AddView';\nimport { useDrag } from 'react-dnd'\n\nexport default function BlockEditor(props) {\n\n    const { selectItem, selectedItem, openModal, removeItem, removeClass, presentation } = useContext(GlobalContext);\n\n\n    const blockType = () => {\n        switch (props.block.type) {\n            case 'text':\n                return <div id={props.block.id} className={props.block.classlist && props.block.classlist.toString().replace(',', ' ')}>{props.block.text}</div>\n                // <ContentEditable\n                //     tagName=\"div\"\n                //     id={props.block.id}\n                //     className={props.block.classlist.toString().replace(',', ' ')}\n                //     html={props.block.data}\n                //     disabled={selectedItem && !selectedItem.id === props.block.id}\n\n                // />\n            case 'image':\n                return <img contentEditable={true} className={props.block.classlist && props.block.classlist.toString().replace(',', ' ')} alt={props.block.name} src={props.block.blob} />\n            case 'container':\n                return <div  id={props.block.id} className={ props.block.classlist && props.block.classlist.toString().replace(',', ' ')}>{\n                    props.block && props.block.children && props.block.children.map((item, i) => {\n                        if (item.type === 'text') {\n                            // return <ContentEditable\n                            //     tagName=\"span\"\n                            //     key={i}\n                            //     id={item.id}\n                            //     className={item.classlist.toString().replace(',', ' ')}\n                            //     html={item.data}\n                            //     disabled={selectedItem && !selectedItem.id === props.block.id}\n                            // />\n                            return <span key={i} className={item.classlist.toString().replace(',', ' ')}>{item.text}</span>\n                        }\n                        if (item.type === 'link') {\n                            return <a key={i} href={window.location.URL} id={props.block.id} className={item.classlist.toString().replace(',', ' ')}>{item.text}</a>\n                        }\n                        return null\n                    })\n                }\n                </div>\n\n            default:\n                break;\n        }\n    }\n\n    return (\n        <div id={props.block.id} >\n            <div onClick={(e) => { selectItem(props.block) }}>\n                {\n                    selectedItem && selectedItem.id === props.block.id ?\n                        <div className=\"flex mt-2\">\n                            \n                            {\n                                props.block && props.block.classlist && props.block.classlist.length > 0 && props.block.classlist.map((c, i) => {\n                                    return <button key={i} className=\"text-white text-xs py-1 px-2 mr-1 bg-indigo-600 rounded-sm mb-0 inline-flex items-center\">.{c}<span className=\"ml-2\"><img style={{ width: 10 }} src={CloseIcon} alt=\"remove class\" onClick={() => removeClass(props.block, c)} /></span></button>\n                                })\n                            }\n                        </div> : null\n                }\n\n\n                <div className={`border-indigo-300 bg-white border-dashed rounded-sm relative w-full ${selectedItem && selectedItem.id === props.block.id ? 'border mb-3' : 'border-0 mb-0 p-0'} `}>{blockType()}\n                \n                    {\n                        selectedItem && selectedItem.id === props.block.id ?\n                            <div className=\"absolute -bottom-4 left-1/2 p-1 transform -translate-x-1/2 bg-indigo-600 rounded inline-flex items-center justify-center z-20\">\n                                <button className=\"p-1 hover:bg-indigo-700 rounded\" onClick={() => openModal(<AddView />)}>\n                                    <ReactSVG src={PlusIcon} />\n                                </button>\n                            </div> : null\n                    }\n\n                    {\n                        selectedItem && selectedItem.id === props.block.id ?\n                            <div className=\"absolute -right-4 top-1/2 p-1 transform -translate-y-1/2  rounded inline-flex flex-col items-center justify-center z-20\">\n                                {\n                                    props.block.type === 'image' ?\n                                        <button\n                                            onClick={() => {\n                                                openModal(<ImageCropper />)\n                                            }}\n                                            className=\"p-2 bg-indigo-600 hover:bg-indigo-800 rounded\">\n                                            <ReactSVG src={CropIcon}\n                                                beforeInjection={(svg) => {\n                                                    svg.setAttribute('style', 'stroke: white; width: 18px; height: 18px;')\n                                                }}\n                                            />\n                                        </button> :\n                                        null\n                                }\n\n                                <button className={`p-2 bg-indigo-600 hover:bg-indigo-700 rounded cursor-pointer ${props.block.type === 'image' ? 'mt-1' : ''}`} onClick={() => removeItem(props.block, presentation)}>\n                                    <ReactSVG src={TrashIcon} />\n                                </button>\n                                \n\n                            </div> : null\n                    }\n                </div>\n            </div>\n        </div>\n\n    )\n}\n","/Users/mdefreitas/Desktop/inscribe-app/src/components/InsModal.js",[],"/Users/mdefreitas/Desktop/inscribe-app/src/components/SideBarRight.js",[],"/Users/mdefreitas/Desktop/inscribe-app/src/components/ExtensionCard.js",[],"/Users/mdefreitas/Desktop/inscribe-app/src/components/RecentContainer.js",[],["370","371"],"/Users/mdefreitas/Desktop/inscribe-app/src/components/sidebar/TemplatesBar.js",[],"/Users/mdefreitas/Desktop/inscribe-app/src/store/ActionTypes.js",[],"/Users/mdefreitas/Desktop/inscribe-app/src/store/AppReducer.js",[],"/Users/mdefreitas/Desktop/inscribe-app/src/components/Collaspible.js",[],"/Users/mdefreitas/Desktop/inscribe-app/src/components/RecentFile.js",[],"/Users/mdefreitas/Desktop/inscribe-app/src/assets/icons/TrashIcon.js",[],"/Users/mdefreitas/Desktop/inscribe-app/src/components/buttons/EditButton.js",[],"/Users/mdefreitas/Desktop/inscribe-app/src/assets/icons/DownloadIcon.js",[],"/Users/mdefreitas/Desktop/inscribe-app/src/components/ImageCropper.js",["372"],"import React, { useContext, useRef, useState } from 'react'\nimport ReactCrop from 'react-image-crop';\nimport { GlobalContext } from '../store/GlobalState';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport { useEffect } from 'react';\nimport { ReactSVG } from 'react-svg';\nimport CloseIcon from './../assets/icons/close.svg';\nimport HeaderTitle from './HeaderTitle';\n\n\nexport default function ImageCropper() {\n\n    const { selectedItem, setImageCrop, closeModal, setImageBlob } = useContext(GlobalContext);\n    const [cropIndex, setCropIndex] = useState(0);\n    const [currentCrop, setCurrentCrop] = useState({\n        y: selectedItem.crops[cropIndex].y,\n        x: selectedItem.crops[cropIndex].x,\n        width: selectedItem.crops[cropIndex].width,\n        height: selectedItem.crops[cropIndex].height,\n    });\n\n    const elementRef = useRef();\n\n    useEffect(() => {\n        setCurrentCrop({\n            y: selectedItem.crops[cropIndex].y,\n            x: selectedItem.crops[cropIndex].x,\n            width: selectedItem.crops[cropIndex].width,\n            height: selectedItem.crops[cropIndex].height,\n        })\n        \n    }, [cropIndex])\n\n    return (<>\n        <HeaderTitle title=\"Image Crop\">\n        <button\n            onClick={() => closeModal()}\n            className=\"p-2 hover:bg-gray-900 rounded\">\n            <ReactSVG src={CloseIcon} />\n        </button>\n        </HeaderTitle>\n        <div className=\"p-4 w-full\">\n            {\n                selectedItem && selectedItem.raw ?\n                    <ReactCrop\n                        className=\"rounded w-full\"\n                        locked={true}\n                        ref={elementRef}\n                        src={selectedItem.raw}\n                        crop={currentCrop}\n                        onComplete={(crop, percent) => {\n                            console.log(crop)\n                            setImageCrop(selectedItem, crop, currentCrop.id)\n                        }}\n                        onChange={newCrop => {\n                            setCurrentCrop({\n                                ...selectedItem.crops[cropIndex],\n                                width: selectedItem.crops[cropIndex].width,\n                                height: selectedItem.crops[cropIndex].height,\n                                x: newCrop.x,\n                                y: newCrop.y\n                            })\n\n                        }} /> : null\n            }\n            <div className=\"py-2 flex justify-between\" style={{ minWidth: 900, maxWidth: '100%' }}>\n                <div className=\"flex\">\n                    {\n                        selectedItem && selectedItem.crops.map((_crop, i) => {\n                            return <button\n                                onClick={() => {\n                                    setCropIndex(i)\n                                    setCurrentCrop({\n                                        ...selectedItem.crops[i],\n                                        y: selectedItem.crops[i].y,\n                                        x: selectedItem.crops[i].x,\n                                        width: selectedItem.crops[i].width,\n                                        height: selectedItem.crops[i].height,\n                                    })\n                                }}\n                                key={i}\n                                className={`px-2 py-1 rounded-sm ${cropIndex === i ? 'bg-gray-700 text-gray-50' : 'text-gray-400 bg-gray-50'} border border-gray-100 mr-1`}>{_crop.name}</button>\n                        })\n                    }\n                </div>\n                <div className=\"flex\">\n                    <button className=\"px-4 py-2 text-gray-500 bg-gray-50 hover:bg-gray-100 rounded border border-gray-100 mr-1\" onClick={() => closeModal()}>Cancel</button>\n                    <button\n                        onClick={() => {\n                            getCroppedImg(elementRef.current.imageRef, selectedItem.crops[cropIndex])\n                                .then(blob => {\n                                    setImageBlob(selectedItem, blob, selectedItem.crops[cropIndex].id)\n                                })\n                                .then(() => closeModal())\n                        }}\n                        className=\"px-4 py-2 bg-indigo-700 text-gray-100 font-medium rounded\">Select Crop</button>\n                </div>\n            </div>\n        </div>\n        </>\n    )\n}\nfunction getCroppedImg(_image, crop, fileName) {\n\n    const canvas = document.createElement(\"canvas\");\n    // As a blob\n    return new Promise((resolve, reject) => {\n\n            const scaleX = _image.naturalWidth / _image.width;\n            const scaleY = _image.naturalHeight / _image.height;\n\n            canvas.width = crop.width;\n            canvas.height = crop.height;\n            const ctx = canvas.getContext(\"2d\");\n\n            // New lines to be added\n            const pixelRatio = window.devicePixelRatio;\n            canvas.width = crop.width * pixelRatio;\n            canvas.height = crop.height * pixelRatio;\n            ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n            ctx.imageSmoothingQuality = \"high\";\n            ctx.drawImage(\n                _image,\n                crop.x * scaleX,\n                crop.y * scaleY,\n                crop.width * scaleX,\n                crop.height * scaleY,\n                0,\n                0,\n                crop.width,\n                crop.height\n            );\n            const base64Image = canvas.toDataURL(\"image/jpeg\", 1);\n            resolve(base64Image);\n    })\n\n}","/Users/mdefreitas/Desktop/inscribe-app/src/components/OutlineCollapsible.js",["373","374","375","376","377"],"import React from 'react'\nimport { useContext } from 'react';\nimport { useState } from 'react'\nimport { GlobalContext } from '../store/GlobalState';\nimport ArrowDown from './../assets/icons/arrow-down.svg'\nimport DraggableItem from './DraggableItem';\n\nexport default function OutlineCollapsible(props) {\n\nconst [isOpen, setIsOpen] = useState(false);\nconst { selectedItem, selectItem, handleOnDrag } = useContext(GlobalContext)\n\n    return (\n     \n        <div className={`pl-2 cursor-move rounded ${isOpen ? '' : 'hover:bg-gray-100 hover:bg-opacity-60'}  ${selectedItem && props.item.id === selectedItem.id && !isOpen ? 'bg-gray-100' : ''} bg-opacity-60`} {...props}>\n            <div className=\"p-2 flex justify-between\">\n                <div className=\"leading-4\">\n                    <span className=\"text-gray-700 text-sm\">{props.item.text}</span> <br />\n                    <span className=\"text-gray-300 text-xs\">{props.item.description}</span>\n                </div>\n                <button className='cursor-pointer'>{props.icon}</button>\n            </div>\n        </div>\n    )\n}\n","/Users/mdefreitas/Desktop/inscribe-app/src/assets/icons/UpdateIcon.js",[],"/Users/mdefreitas/Desktop/inscribe-app/src/components/FileTemplate.js",[],"/Users/mdefreitas/Desktop/inscribe-app/src/components/AddView.js",[],"/Users/mdefreitas/Desktop/inscribe-app/src/components/HeaderTitle.js",[],"/Users/mdefreitas/Desktop/inscribe-app/src/components/AssetPicker.js",["378"],"import React, { useContext } from 'react'\nimport { GlobalContext } from '../store/GlobalState'\nimport AssetCollapsible from './AssetCollapsible'\nimport Collaspible from './Collaspible'\nimport DropZoneFile from './DropZoneFile'\nimport RecentFile from './RecentFile'\n\nexport default function AssetPicker() {\n    const { presentation } = useContext(GlobalContext)\n    return (\n        <Collaspible title=\"Assets\" isOpen={false}>\n        <div>\n            <DropZoneFile />\n            <div className=\"py-1\" >\n\n                    {\n                        presentation && presentation.assets.map((asset, index) => {\n\n                            return <AssetCollapsible key={index} item={asset} >\n                                {\n                                    asset.items && asset.items.length > 0 && asset.items.map((b, i) => {\n                                        return <AssetCollapsible\n                                            item={b}\n                                            key={i}>\n                                            {\n                                                b.children && b.children.length > 0 && b.children.map((c, x) => {\n                                                    return <AssetCollapsible\n                                                        item={c}\n                                                        key={x}></AssetCollapsible>\n                                                })\n                                            }\n                                        </AssetCollapsible>\n                                    })\n                                }\n                            </AssetCollapsible>\n\n                        })\n                    }\n\n                </div>\n        </div>\n        </Collaspible>\n    )\n}\n","/Users/mdefreitas/Desktop/inscribe-app/src/components/Components.js",[],"/Users/mdefreitas/Desktop/inscribe-app/src/components/TOCView.js",[],"/Users/mdefreitas/Desktop/inscribe-app/src/components/topbar/TopBar.js",[],"/Users/mdefreitas/Desktop/inscribe-app/src/components/PresentationEditor.js",["379","380"],"import React, { useContext } from 'react'\nimport { GlobalContext } from '../store/GlobalState';\nimport BlockEditor from './BlockEditor'\nimport ColumnsEditor from './ColumnsEditor';\nimport PlaceholderEditor from './PlaceholderEditor';\nimport DroppableZone from './DroppableZone';\nimport { useEffect } from 'react';\nimport localforage from 'localforage';\n\nexport default function PresentationEditor() {\n\n    const { presentation, loadPresentation, breakpoint } = useContext(GlobalContext);\n\n \n    const setBreakPointWidth = () => {\n        switch (breakpoint) {\n            case \"desktop\":\n                return \"100%\";\n            case \"tablet-portrait\":\n                return 767;\n            case \"tablet-landscape\":\n                return 1024;\n            case \"phone\":\n                return 425;\n            default:\n                return \"100%\";\n        }\n    }\n\n    useEffect(() => {\n        localforage.getItem('presentation')\n        .then(presentation => {\n            loadPresentation(presentation);\n        })\n    },[])\n\n    return (\n        <div \n        id=\"canvas\"\n        className={`bg-white flex-1 mx-auto ${breakpoint !== 'desktop' ? 'border-l-4 border-r-4 border-gray-200' : ''}`} style={{ maxWidth: setBreakPointWidth(), transition: 'max-width ease-in-out .2s' }}>\n            <div className=\"container px-4 h-screen overflow-auto pb-24 mx-auto\" style={{ paddingTop: 100, maxWidth: 1024 }}  >\n                <DroppableZone type=\"top\"/>\n           \n                {\n                    presentation && presentation.items.map((item, index) => {  \n                        return <div key={index}>\n                                {\n                                    item.type === 'columns' ? \n                                    <ColumnsEditor item={item} /> : \n                                    <BlockEditor block={item} index={index} />\n                                }\n                            \n                        </div>\n                    })\n                }\n\n                {\n                    presentation && presentation.items.length > 0 ? <DroppableZone type=\"bottom\"/> : null\n                }\n                \n            </div>\n        </div>\n    )\n}\n","/Users/mdefreitas/Desktop/inscribe-app/src/utils/useQuery.js",[],"/Users/mdefreitas/Desktop/inscribe-app/src/components/topbar/PrototypeNav.js",[],"/Users/mdefreitas/Desktop/inscribe-app/src/components/Component.js",[],"/Users/mdefreitas/Desktop/inscribe-app/src/components/ColumnsEditor.js",["381","382","383"],"import React from 'react'\nimport { useContext } from 'react'\nimport { ReactSVG } from 'react-svg'\nimport { useDrop } from 'react-dnd'\nimport { GlobalContext } from '../store/GlobalState'\nimport BlockEditor from './BlockEditor'\nimport ColumnItemEditor from './ColumnItemEditor'\nimport DroppableZone from './DroppableZone'\nimport TrashIcon from './../assets/icons/trash-white.svg';\nimport PlaceholderEditor from './PlaceholderEditor'\nexport default function ColumnsEditor(props) {\n\n    const { selectComponent, component, removeItem, presentation } = useContext(GlobalContext)\n\n\n    // const handleOnDrop = (event) => {\n    //     event.preventDefault()\n    //     if (event && selectedItem) {\n    //         if (event.target.id.includes('placeholder')) {\n    //            // let id = event.target.id.split('placeholder-')[1];\n\n    //         }\n\n    //     }\n    // }\n\n    const [{ isOver }, drop] = useDrop(() => ({\n       \n        accept: 'ASSET',\n        drop: (item, monitor) => {\n            console.log(item)\n        },\n        collect: (monitor) => ({\n          isOver: monitor.isOver(),\n          canDrop: monitor.canDrop()\n        })\n      }))\n\n    \n\n\n    return (\n        <div id={props.item.id} >\n\n            <div\n                onClick={() => selectComponent(props.item)}\n                className={`cursor-default relative w-full ${component && props.item.id === component.id ? 'border-2 border-indigo-300 border-dashed rounded-sm' : ''} `}>\n\n                <div className={props.item.classlist}>\n                    {\n                        props.item.children && props.item.children.length > 0 && props.item.children.map((column, index) => {\n\n                            return <div key={index} \n                            className={`${column && column.classlist} border border-gray-100 border-dashed relative ${isOver ? 'bg-indigo-100 bg-opacity-20 border-indigo-100': ''}`}  ref={drop} style={{ minHeight: column.children.length > 0 ? 'auto' : 200}}>\n                               \n                                    {\n                                        column.children && column.children.length > 0 && column.children.map((child, i) => {\n                                            return <ColumnItemEditor key={i} block={child} index={i} />\n                                        })\n                                    }\n                            </div>\n\n                        })\n                    }\n                    {\n                        component && component.id === props.item.id ?\n                        <div className=\"absolute -right-4 top-1/2 p-1 transform -translate-y-1/2  rounded inline-flex flex-col items-center justify-center z-20\">\n                            <button className={`p-2 bg-indigo-600 hover:bg-indigo-700 rounded cursor-move`} onClick={() => removeItem(props.item, presentation)}>\n                                <ReactSVG src={TrashIcon} />\n                            </button>\n                        </div> :\n                        null\n                    } \n                    \n                </div>\n\n            </div>\n        </div>\n    )\n}\n","/Users/mdefreitas/Desktop/inscribe-app/src/components/DroppableZone.js",["384"],"import React from 'react'\nimport { useDrop } from 'react-dnd';\nimport {  useDragLayer } from 'react-dnd';\nimport { useContext } from 'react';\nimport { GlobalContext } from '../store/GlobalState';\nimport localforage from 'localforage';\n\n\nexport default function DroppableZone(props) {\n\n  const { presentation, loadPresentation } = useContext(GlobalContext)\n  const isDragging = useDragLayer(\n    monitor => monitor.isDragging()\n  );\n\n  function array_move(arr, old_index, new_index) {\n    if (new_index >= arr.length) {\n        var k = new_index - arr.length + 1;\n        while (k--) {\n            arr.push(undefined);\n        }\n    }\n    arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);\n    return arr; // for testing\n};\n\n\n\n  const handleOnDrop = async (item, type) => {\n\n    let _presentation = await localforage.getItem('presentation');\n\n    console.log(presentation)\n    if (_presentation && item) {\n      \n        if (type === 'ASSET') { \n\n        if (props.type === 'block') {   \n            let targetIndex = _presentation.items.findIndex(el => el.id === props.id);\n            _presentation.items[targetIndex] = item;\n            loadPresentation(_presentation);\n        }\n\n        if (props.type === 'top') {\n          \n          if (item.extension && item.extension === 'MEPSA') {\n           \n            console.log(_presentation)\n            _presentation.items = [\n                ...item.items,\n                ..._presentation.items\n              ]\n\n          } else {\n            _presentation.items.unshift(item)\n          }\n            loadPresentation(_presentation);\n        }\n\n        if (props.type === 'bottom') {   \n          _presentation.items = [\n              ..._presentation.items,\n              item\n            ]\n          loadPresentation(_presentation);\n        }\n\n\n\n        // if (props.type === 'column' && props.parent) {\n        //     let columnsIndex = presentation.items.findIndex(el => el.id === props.parent.id);\n        //     let columns = props.parent;\n        //     let columnIndex = columns.children.findIndex(el => el.id === props.id);\n        //     columns.children[columnIndex].children.push(item);\n        //     return setTimeout(() => addToPresentation(columns, columnsIndex, columnIndex), 500)\n        // }\n\n        }\n\n\n    }\n      \n  }\n\n    const [{ isOver }, drop] = useDrop(() => ({\n        accept: ['ASSET', 'ITEM'],\n        drop: (item, monitor) => handleOnDrop(item, monitor.getItemType()),\n        collect: (monitor) => ({\n          isOver: monitor.isOver()\n        })\n      }))\n\n    return (\n    <>\n        {\n            props.children ? <div \n              ref={drop}\n              id={`${props.type}-${props.id}`} \n              style={{ height: isOver ? 200 : 'auto', transition: 'all ease-in-out .2s' }}\n              className={`${isDragging ? 'border' : ''} ${isOver ? 'bg-indigo-50 bg-opacity-50' : ''}  border-indigo-100 border-dashed`}\n            >{props.children}</div> :\n            <div \n                ref={drop}\n                id={`${props.type}-placeholder`} \n                style={{ minHeight: isDragging ? 50 : 0, height: isOver ? 150 : 'auto', transition: 'all ease-in-out .2s' }}\n                className={`relative ${isDragging ? 'border' : ''} ${isOver ? 'bg-indigo-50 bg-opacity-50' : ''}  border-indigo-100 border-dashed`}\n            ></div>\n        }\n    </>\n      \n        \n    )\n}\n","/Users/mdefreitas/Desktop/inscribe-app/src/components/DraggableItem.jsx",[],"/Users/mdefreitas/Desktop/inscribe-app/src/components/PlaceholderEditor.jsx",["385","386"],"import React, { useContext } from 'react'\nimport { ReactSVG } from 'react-svg';\nimport { GlobalContext } from '../store/GlobalState';\nimport AddView from './AddView';\nimport { useDrop } from 'react-dnd'\nimport PlusIcon from './../assets/icons/plus-white.svg';\n\nexport default function PlaceholderEditor() {\n    const { selectedItem, openModal, selectItem, addToPresentation, presentation, loadPresentation } = useContext(GlobalContext);\n\n\n\n    const [{ isOver }, drop] = useDrop(() => ({\n       \n        accept: 'ASSET',\n        drop: (item, monitor) => {\n            \n            return addToPresentation(item, 0)\n        },\n        collect: (monitor) => ({\n          isOver: monitor.isOver(),\n          canDrop: monitor.canDrop()\n        })\n      }))\n\n    \n    return (\n        <div ref={drop}> \n                <div onClick={() => selectItem({id: 'placeholder'})} id=\"placeholder\" className={`relative border border-gray-100 border-dashed ${isOver ? 'bg-indigo-100 bg-opacity-20 border-indigo-100': ''} h-32 ${selectedItem && selectedItem.id === \"placeholder\" ? 'border-2 mb-3 border-indigo-300' : 'border-0 mb-0'}`} >\n                    {\n                    selectedItem && selectedItem.id === \"placeholder\" ?\n                        <div className=\"absolute bottom-1/2 left-1/2 p-1 transform -translate-x-1/2 translate-y-1/2 bg-indigo-600 rounded inline-flex items-center justify-center z-20\">\n                            <button className=\"p-1 hover:bg-indigo-700 rounded\" onClick={() => openModal(<AddView />)}>\n                                <ReactSVG src={PlusIcon} />\n                            </button>\n                        </div> : null\n                    }\n                </div> \n        </div>\n    )\n}\n","/Users/mdefreitas/Desktop/inscribe-app/src/components/AssetCollapsible.jsx",["387"],"import React from 'react'\nimport { useContext } from 'react';\nimport { useState } from 'react'\nimport { GlobalContext } from '../store/GlobalState';\nimport ArrowDown from './../assets/icons/arrow-down.svg'\nimport { useDrag } from 'react-dnd'\nexport default function AssetCollapsible(props) {\n\n    const [isOpen, setIsOpen] = useState(false);\n    const { selectedItem  } = useContext(GlobalContext);\n    const [{ isDragging }, drag] = useDrag(() => ({\n        type: 'ASSET',\n        item: props.item,\n        collect: (monitor) => ({\n            isDragging: monitor.isDragging()\n        })\n    }))\n\n\n    return (\n  \n        <div className={`pl-2 rounded ${isOpen ? '' : 'hover:bg-gray-100 hover:bg-opacity-60 cursor-move'}  ${selectedItem && props.item.id === selectedItem.id && !isOpen ? 'bg-gray-100' : ''} bg-opacity-60`} {...props} ref={!isOpen ? drag : null}>\n            <div className=\"p-2 flex justify-between\">\n                <div className=\"leading-4\">\n                    <span className=\"text-gray-700 text-sm\">{props.item.text}</span> <br />\n                    <span className=\"text-gray-300 text-xs\">{props.item.description}</span>\n                </div>\n                {\n                    props.item.type === 'container' || props.item.type === 'columns' ?\n                        <button onClick={() => setIsOpen(!isOpen)}>\n                            <img src={ArrowDown} alt=\"\" style={{\n                                width: 24,\n                                transform: `rotate(${isOpen ? '0' : '90'}deg)`,\n                                transition: 'transform .3s'\n                            }} />\n                        </button> : null\n                }\n\n            </div>\n            {\n                isOpen ?\n                    <div className=\"p-2\">\n                        {props.children}\n                    </div> : null\n            }\n        </div>\n    )\n}\n","/Users/mdefreitas/Desktop/inscribe-app/src/components/ColumnItemEditor.jsx",["388","389","390","391","392"],"import React, { useContext } from 'react'\n// import ContentEditable from 'react-contenteditable'\nimport PlusIcon from './../assets/icons/plus-white.svg';\nimport CloseIcon from './../assets/icons/close-white.svg';\nimport { ReactSVG } from 'react-svg';\nimport CropIcon from './../assets/icons/crop.svg';\nimport TrashIcon from './../assets/icons/trash-white.svg';\nimport { GlobalContext } from '../store/GlobalState';\nimport ImageCropper from './ImageCropper';\nimport AddView from './AddView';\nimport { useDrag } from 'react-dnd'\n\nexport default function ColumnItemEditor(props) {\n\n    const { selectItem, selectedItem, openModal, removeItem, removeClass } = useContext(GlobalContext);\n\n\n    const blockType = () => {\n        switch (props.block.type) {\n            case 'text':\n                return <div id={props.block.id} className={props.block.classlist && props.block.classlist.toString().replace(',', ' ')}>{props.block.text}</div>\n                // <ContentEditable\n                //     tagName=\"div\"\n                //     id={props.block.id}\n                //     className={props.block.classlist.toString().replace(',', ' ')}\n                //     html={props.block.data}\n                //     disabled={selectedItem && !selectedItem.id === props.block.id}\n\n                // />\n            case 'image':\n                return <img contentEditable={true} className={props.block.classlist && props.block.classlist.toString().replace(',', ' ')} alt={props.block.name} src={props.block.blob} />\n            case 'container':\n                return <div  id={props.block.id} className={ props.block.classlist && props.block.classlist.toString().replace(',', ' ')}>{\n                    props.block && props.block.children && props.block.children.map((item, i) => {\n                        if (item.type === 'text') {\n                            // return <ContentEditable\n                            //     tagName=\"span\"\n                            //     key={i}\n                            //     id={item.id}\n                            //     className={item.classlist.toString().replace(',', ' ')}\n                            //     html={item.data}\n                            //     disabled={selectedItem && !selectedItem.id === props.block.id}\n                            // />\n                            return <span key={i} className={item.classlist.toString().replace(',', ' ')}>{item.text}</span>\n                        }\n                        if (item.type === 'link') {\n                            return <a key={i} href={window.location.URL} id={props.block.id} className={item.classlist.toString().replace(',', ' ')}>{item.text}</a>\n                        }\n                        return null\n                    })\n                }\n                </div>\n\n            default:\n                break;\n        }\n    }\n\n    return (\n        <div id={props.block.id} >\n            <div onClick={(e) => { selectItem(props.block) }}>\n                {\n                    selectedItem && selectedItem.id === props.block.id ?\n                        <div className=\"flex mt-2\">\n                            \n                            {\n                                props.block && props.block.classlist && props.block.classlist.length > 0 && props.block.classlist.map((c, i) => {\n                                    return <button key={i} className=\"text-white text-xs py-1 px-2 mr-1 bg-indigo-600 rounded-sm mb-0 inline-flex items-center\">.{c}<span className=\"ml-2\"><img style={{ width: 10 }} src={CloseIcon} alt=\"remove class\" onClick={() => removeClass(props.block, c)} /></span></button>\n                                })\n                            }\n                        </div> : null\n                }\n\n\n                <div className={`border-indigo-300 bg-white border-dashed rounded-sm relative w-full ${selectedItem && selectedItem.id === props.block.id ? 'border mb-3' : 'border-0 mb-0 p-0'} `}>{blockType()}\n\n                    {\n                        selectedItem && selectedItem.id === props.block.id ?\n                            <div className=\"absolute -right-4 top-1/2 p-1 transform -translate-y-1/2  rounded inline-flex flex-col items-center justify-center z-20\">\n                                {\n                                    props.block.type === 'image' ?\n                                        <button\n                                            onClick={() => {\n                                                openModal(<ImageCropper />)\n                                            }}\n                                            className=\"p-2 bg-indigo-600 hover:bg-indigo-800 rounded\">\n                                            <ReactSVG src={CropIcon}\n                                                beforeInjection={(svg) => {\n                                                    svg.setAttribute('style', 'stroke: white; width: 18px; height: 18px;')\n                                                }}\n                                            />\n                                        </button> :\n                                        null\n                                }\n\n                                {/* <button className={`p-2 bg-indigo-600 hover:bg-indigo-700 rounded cursor-move ${props.block.type === 'image' ? 'mt-1' : ''}`} onClick={() => removeItem(props.block)}>\n                                    <ReactSVG src={TrashIcon} />\n                                </button> */}\n                                \n\n                            </div> : null\n                    }\n                </div>\n            </div>\n        </div>\n\n    )\n}\n",{"ruleId":"393","replacedBy":"394"},{"ruleId":"395","replacedBy":"396"},{"ruleId":"397","severity":1,"message":"398","line":1,"column":40,"nodeType":"399","messageId":"400","endLine":1,"endColumn":48},{"ruleId":"397","severity":1,"message":"401","line":7,"column":8,"nodeType":"399","messageId":"400","endLine":7,"endColumn":23},{"ruleId":"402","severity":1,"message":"403","line":39,"column":8,"nodeType":"404","endLine":39,"endColumn":10,"suggestions":"405"},{"ruleId":"406","severity":1,"message":"407","line":21,"column":40,"nodeType":"408","messageId":"409","endLine":21,"endColumn":42},{"ruleId":"406","severity":1,"message":"407","line":41,"column":40,"nodeType":"408","messageId":"409","endLine":41,"endColumn":42},{"ruleId":"397","severity":1,"message":"410","line":4,"column":8,"nodeType":"399","messageId":"400","endLine":4,"endColumn":20},{"ruleId":"397","severity":1,"message":"411","line":3,"column":5,"nodeType":"399","messageId":"400","endLine":3,"endColumn":9},{"ruleId":"406","severity":1,"message":"407","line":26,"column":56,"nodeType":"408","messageId":"409","endLine":26,"endColumn":58},{"ruleId":"412","severity":1,"message":"413","line":40,"column":36,"nodeType":"414","endLine":40,"endColumn":95},{"ruleId":"397","severity":1,"message":"398","line":1,"column":17,"nodeType":"399","messageId":"400","endLine":1,"endColumn":25},{"ruleId":"397","severity":1,"message":"398","line":2,"column":29,"nodeType":"399","messageId":"400","endLine":2,"endColumn":37},{"ruleId":"397","severity":1,"message":"415","line":20,"column":5,"nodeType":"399","messageId":"400","endLine":20,"endColumn":17},{"ruleId":"397","severity":1,"message":"416","line":21,"column":5,"nodeType":"399","messageId":"400","endLine":21,"endColumn":17},{"ruleId":"406","severity":1,"message":"417","line":28,"column":28,"nodeType":"408","messageId":"418","endLine":28,"endColumn":30},{"ruleId":"402","severity":1,"message":"419","line":78,"column":6,"nodeType":"404","endLine":78,"endColumn":21,"suggestions":"420"},{"ruleId":"397","severity":1,"message":"421","line":3,"column":8,"nodeType":"399","messageId":"400","endLine":3,"endColumn":16},{"ruleId":"397","severity":1,"message":"422","line":5,"column":8,"nodeType":"399","messageId":"400","endLine":5,"endColumn":20},{"ruleId":"397","severity":1,"message":"423","line":2,"column":10,"nodeType":"399","messageId":"400","endLine":2,"endColumn":18},{"ruleId":"397","severity":1,"message":"424","line":10,"column":13,"nodeType":"399","messageId":"400","endLine":10,"endColumn":25},{"ruleId":"397","severity":1,"message":"425","line":31,"column":19,"nodeType":"399","messageId":"400","endLine":31,"endColumn":27},{"ruleId":"397","severity":1,"message":"426","line":73,"column":10,"nodeType":"399","messageId":"400","endLine":73,"endColumn":23},{"ruleId":"393","replacedBy":"427"},{"ruleId":"395","replacedBy":"428"},{"ruleId":"402","severity":1,"message":"429","line":28,"column":7,"nodeType":"404","endLine":28,"endColumn":9,"suggestions":"430"},{"ruleId":"397","severity":1,"message":"431","line":156,"column":9,"nodeType":"399","messageId":"400","endLine":156,"endColumn":14},{"ruleId":"402","severity":1,"message":"432","line":102,"column":6,"nodeType":"404","endLine":102,"endColumn":21,"suggestions":"433"},{"ruleId":"397","severity":1,"message":"434","line":11,"column":10,"nodeType":"399","messageId":"400","endLine":11,"endColumn":17},{"ruleId":"393","replacedBy":"435"},{"ruleId":"395","replacedBy":"436"},{"ruleId":"402","severity":1,"message":"437","line":32,"column":8,"nodeType":"404","endLine":32,"endColumn":19,"suggestions":"438"},{"ruleId":"397","severity":1,"message":"439","line":5,"column":8,"nodeType":"399","messageId":"400","endLine":5,"endColumn":17},{"ruleId":"397","severity":1,"message":"440","line":6,"column":8,"nodeType":"399","messageId":"400","endLine":6,"endColumn":21},{"ruleId":"397","severity":1,"message":"441","line":10,"column":16,"nodeType":"399","messageId":"400","endLine":10,"endColumn":25},{"ruleId":"397","severity":1,"message":"442","line":11,"column":23,"nodeType":"399","messageId":"400","endLine":11,"endColumn":33},{"ruleId":"397","severity":1,"message":"443","line":11,"column":35,"nodeType":"399","messageId":"400","endLine":11,"endColumn":47},{"ruleId":"397","severity":1,"message":"444","line":6,"column":8,"nodeType":"399","messageId":"400","endLine":6,"endColumn":18},{"ruleId":"397","severity":1,"message":"445","line":5,"column":8,"nodeType":"399","messageId":"400","endLine":5,"endColumn":25},{"ruleId":"402","severity":1,"message":"403","line":35,"column":7,"nodeType":"404","endLine":35,"endColumn":9,"suggestions":"446"},{"ruleId":"397","severity":1,"message":"447","line":6,"column":8,"nodeType":"399","messageId":"400","endLine":6,"endColumn":19},{"ruleId":"397","severity":1,"message":"448","line":8,"column":8,"nodeType":"399","messageId":"400","endLine":8,"endColumn":21},{"ruleId":"397","severity":1,"message":"445","line":10,"column":8,"nodeType":"399","messageId":"400","endLine":10,"endColumn":25},{"ruleId":"397","severity":1,"message":"449","line":16,"column":12,"nodeType":"399","messageId":"400","endLine":16,"endColumn":22},{"ruleId":"397","severity":1,"message":"450","line":9,"column":69,"nodeType":"399","messageId":"400","endLine":9,"endColumn":81},{"ruleId":"397","severity":1,"message":"451","line":9,"column":83,"nodeType":"399","messageId":"400","endLine":9,"endColumn":99},{"ruleId":"397","severity":1,"message":"452","line":11,"column":14,"nodeType":"399","messageId":"400","endLine":11,"endColumn":24},{"ruleId":"397","severity":1,"message":"453","line":3,"column":8,"nodeType":"399","messageId":"400","endLine":3,"endColumn":16},{"ruleId":"397","severity":1,"message":"454","line":7,"column":8,"nodeType":"399","messageId":"400","endLine":7,"endColumn":17},{"ruleId":"397","severity":1,"message":"455","line":10,"column":8,"nodeType":"399","messageId":"400","endLine":10,"endColumn":15},{"ruleId":"397","severity":1,"message":"434","line":11,"column":10,"nodeType":"399","messageId":"400","endLine":11,"endColumn":17},{"ruleId":"397","severity":1,"message":"456","line":15,"column":50,"nodeType":"399","messageId":"400","endLine":15,"endColumn":60},"no-native-reassign",["457"],"no-negated-in-lhs",["458"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'ContentEditable' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadPresentation'. Either include it or remove the dependency array.","ArrayExpression",["459"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'TemplatesBar' is defined but never used.","'Link' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'isDragAccept' is assigned a value but never used.","'isDragReject' is assigned a value but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","React Hook useEffect has a missing dependency: 'addAsset'. Either include it or remove the dependency array.",["460"],"'moreIcon' is defined but never used.","'TextTruncate' is defined but never used.","'ReactSVG' is defined but never used.","'selectedItem' is assigned a value but never used.","'setCrops' is assigned a value but never used.","'getCroppedImg' is defined but never used.",["457"],["458"],"React Hook useEffect has a missing dependency: 'shortcurtMethods'. Either include it or remove the dependency array.",["461"],"'query' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'addAsset', 'history', 'location.pathname', and 'toggleLeftSidebar'. Either include them or remove the dependency array.",["462"],"'useDrag' is defined but never used.",["457"],["458"],"React Hook useEffect has a missing dependency: 'selectedItem.crops'. Either include it or remove the dependency array.",["463"],"'ArrowDown' is defined but never used.","'DraggableItem' is defined but never used.","'setIsOpen' is assigned a value but never used.","'selectItem' is assigned a value but never used.","'handleOnDrag' is assigned a value but never used.","'RecentFile' is defined but never used.","'PlaceholderEditor' is defined but never used.",["464"],"'BlockEditor' is defined but never used.","'DroppableZone' is defined but never used.","'array_move' is defined but never used.","'presentation' is assigned a value but never used.","'loadPresentation' is assigned a value but never used.","'isDragging' is assigned a value but never used.","'PlusIcon' is defined but never used.","'TrashIcon' is defined but never used.","'AddView' is defined but never used.","'removeItem' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"465","fix":"466"},{"desc":"467","fix":"468"},{"desc":"469","fix":"470"},{"desc":"471","fix":"472"},{"desc":"473","fix":"474"},{"desc":"465","fix":"475"},"Update the dependencies array to be: [loadPresentation]",{"range":"476","text":"477"},"Update the dependencies array to be: [acceptedFiles, addAsset]",{"range":"478","text":"479"},"Update the dependencies array to be: [shortcurtMethods]",{"range":"480","text":"481"},"Update the dependencies array to be: [acceptedFiles, addAsset, history, location.pathname, toggleLeftSidebar]",{"range":"482","text":"483"},"Update the dependencies array to be: [cropIndex, selectedItem.crops]",{"range":"484","text":"485"},{"range":"486","text":"477"},[1485,1487],"[loadPresentation]",[2013,2028],"[acceptedFiles, addAsset]",[963,965],"[shortcurtMethods]",[2598,2613],"[acceptedFiles, addAsset, history, location.pathname, toggleLeftSidebar]",[1134,1145],"[cropIndex, selectedItem.crops]",[1031,1033]]